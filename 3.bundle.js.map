{"version":3,"sources":["webpack:///./src/modules/cipher/cipher.service.ts"],"names":["encrypt","vulnerable","masterKey","withJSONStringify","data","JSON","stringify","AES","toString","decrypt","vulnerableHashed","withJSONParsing","decrypted","UTF8","parse","err","callAction","overlayActions","showSnackbar"],"mappings":"0FAAA,+IAMO,MAAMA,EAAU,CACnBC,EACAC,EACAC,GAAoB,KAEpB,MAAMC,EAAOD,EACPE,KAAKC,UAAUL,GACdA,EAEP,OAAOM,IAAIP,QAAQI,EAAMF,GAAWM,YAG3BC,EAAU,CACnBC,EACAR,EACAS,GAAkB,KAElB,IACI,MAAMC,EAAYL,IAAIE,QAAQC,EAAkBR,GAAWM,SACvDK,KAGJ,OAAOF,EAAkBN,KAAKS,MAAMF,GAAaA,EACnD,MAAOG,GAML,MALAC,YACIC,IAAeC,aACf,2BACA,SAEEH","file":"3.bundle.js","sourcesContent":["import AES from 'crypto-js/aes';\nimport UTF8 from 'crypto-js/enc-utf8';\nimport { PasswordEntityVulnerablePayload } from '@/modules/passwordList/passwordList.constants';\nimport { callAction } from '@/common/utils/store';\nimport { overlayActions } from '@/modules/overlay/overlay.actions';\n\nexport const encrypt = (\n    vulnerable: string | PasswordEntityVulnerablePayload,\n    masterKey: string,\n    withJSONStringify = false\n): string => {\n    const data = withJSONStringify\n        ? JSON.stringify(vulnerable)\n        : (vulnerable as string);\n\n    return AES.encrypt(data, masterKey).toString();\n};\n\nexport const decrypt = (\n    vulnerableHashed: string,\n    masterKey: string,\n    withJSONParsing = false\n): string | PasswordEntityVulnerablePayload => {\n    try {\n        const decrypted = AES.decrypt(vulnerableHashed, masterKey).toString(\n            UTF8\n        );\n\n        return withJSONParsing ? JSON.parse(decrypted) : decrypted;\n    } catch (err) {\n        callAction(\n            overlayActions.showSnackbar,\n            'snackbar.decryptionError',\n            'error'\n        );\n        throw err;\n    }\n};\n"],"sourceRoot":""}