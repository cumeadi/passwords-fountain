{"version":3,"sources":["webpack:///./src/common/components/button/button.component.tsx","webpack:///./src/modules/database/database.actions.ts","webpack:///./src/modules/passwordList/passwordList.actions.ts","webpack:///./src/common/components/button/button.styles.ts","webpack:///./src/common/utils/formValidators.ts","webpack:///./src/common/components/formControl/formControl.styles.ts","webpack:///./src/common/components/formControl/formControl.component.tsx","webpack:///./src/common/components/textInput/textInput.styles.ts","webpack:///./src/common/components/textInput/textInput.component.tsx","webpack:///./node_modules/formee/dist/formee.mjs","webpack:///./src/common/utils/form.ts","webpack:///./src/routes/passwordList/passwordList.styles.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanel.styles.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelConnectCollapsed/optionsPanelConnectCollapsed.styles.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelConnectCollapsed/optionsPanelConnectCollapsed.component.tsx","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelConnectExpanded/optionsPanelConnectExpanded.styles.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelConnectExpanded/optionsPanelConnectExpanded.component.tsx","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelEntityFormCollapsed/optionsPanelEntityFormCollapsed.styles.ts","webpack:///./src/modules/passwordList/passwordList.selectors.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelEntityFormCollapsed/optionsPanelEntityFormCollapsed.component.tsx","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelEntityFormExpanded/optionsPanelEntityFormExpanded.styles.ts","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanelEntityFormExpanded/optionsPanelEntityFormExpanded.component.tsx","webpack:///./src/modules/passwordList/components/optionsPanel/optionsPanel.component.tsx","webpack:///./src/modules/passwordList/components/passwordEntity/passwordEntity.styles.ts","webpack:///./src/common/components/iconButton/iconButton.styles.ts","webpack:///./src/common/components/iconButton/iconButton.component.tsx","webpack:///./src/modules/overlay/components/prompt/prompt.styles.ts","webpack:///./src/modules/overlay/components/prompt/prompt.component.tsx","webpack:///./src/modules/passwordList/components/passwordEntity/passwordEntity.component.tsx","webpack:///./src/routes/passwordList/passwordList.tsx"],"names":["Button","type","children","onClick","disabled","propTypes","PropTypes","string","bool","func","isRequired","any","defaultProps","merge","mergeState","databaseActions","async","appState","masterKey","adminKey","setupClient","encrypt","decrypt","decryptedAdminKey","selectAdminKey","client","secret","encryptedAdminKey","localStorage","setItem","adminKeyLocalStorageKeyName","err","callAction","overlayActions","hideGlobalLoader","showSnackbar","passwordListActions","switchOptionPanelVariant","optionPanelVariantName","currentOptionPanelVariantName","resetSelectedAndDecryptedEntity","selectedAndDecryptedEntity","setSelectedAndDecryptedEntity","entity","fetchPasswords","forceReconnect","showGlobalLoader","fetchAllPasswordEntities","selectIsClientSet","selectClient","store","getState","passwords","optionsPanelVariantNames","entityFormCollapsed","addNewPassword","newEntityPayload","createPasswordEntity","encryptedPasswordEntity","login","password","label","value","editPassword","entityPayload","updatePasswordEntity","refId","removePassword","deletePasswordEntity","setPragma","h","Wrapper","styled","typography","text14","theme","spacing","s12","colors","primaryBlue","shadows","clickableItem","gray","media","gte","breakpoints","s375","stylelint","css","text16","m18","s480","text18","xl30","GridWrapper","white","val","length","encryptionKey","LabelWrapper","fontFamilies","bold","darkBlue","xs6","InputWrapper","ErrorWrapper","red","FormControl","hasError","renderLabel","renderInput","renderError","oneOfType","standard","withError","TextInput","onInput","placeholder","name","serialize","form","j","key","tmp","i","out","rgx1","rgx2","elements","test","options","selected","push","checked","concat","validate","rules","toCheck","nxt","arr","k","msg","len","isOkay","data","trim","call","isValid","validateInputField","fieldName","formRef","formValidation","valueSetter","errorSetter","event","errors","current","target","useInputFormControl","defaultValue","setValue","useState","setErrors","Boolean","PasswordEntityWrapper","OptionsPanelWrapper","Placeholder","PlaceholderTextWrapper","text20","l24","text24","IconSizer","currentVariantName","connectCollapsed","pastelGreen","connectExpanded","entityFormExpanded","significantGreen","zIndexes","xs","ContentWrapper","Content","ButtonWrapper","isInEditMode","fontSizes","xl32","OptionsPanelConnectCollapsed","switchCurrentVariantName","route","OptionsPanelConnectExpanded","useSelector","useAction","useRef","undefined","masterKeyInputState","masterKeyInputProps","handleConfirmClick","e","preventDefault","ref","onSubmit","selectPasswordList","state","passwordList","selectPasswords","createSelector","passwordListState","selectCurrentOptionPanelVariantName","selectSelectedAndDecryptedEntity","selectIsInEditMode","Object","keys","OptionsPanelEntityFormCollapsed","actionLabel","FormControlWrapper","NoteLabelWrapper","OptionsPanelEntityFormExpanded","editedEntity","useInputForm","labelInputState","labelInputProps","loginInputState","loginInputProps","passwordInputState","passwordInputProps","encryptionKeyInputState","encryptionKeyInputProps","handleAction","noteText","renderIfTrue","hidden","OptionsPanel","setCurrentVariantName","CurrentVariant","Row","selectedOutline","xxs2","isSelected","Label","Value","DataWrapper","ControlsWrapper","IconButton","iconName","width","height","number","m","Prompt","renderContent","renderControls","stopPropagation","promptTypes","PasswordEntity","promptType","setPromptType","id","passwordVisibility","resetPromptState","handlePromptConfirm","handleDecryptionPromptConfirm","handleRemovalPromptConfirm","handleControlClick","nextPromptType","handleFilledEyeClick","renderPrompt","confirmBtnLabel","detail","placeholderEntityValue","useFirstTimeRedirection","useEffect","selectIsFirstTimeOnDevice","window","prerendering","setTimeout","PasswordList","isClientSet","isGlobalLoaderVisible","selectIsGlobalLoaderVisible","shouldRenderPlaceholder","switchOptionsPanelVariant","selectedEntity","setSelectedEntity","renderPlaceholder","text","map"],"mappings":"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","file":"5.bundle.js","sourcesContent":["import { h, VNode } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper, GridWrapper } from './button.styles';\n\nexport const Button: TypedComponent<Props> = ({\n    type,\n    children,\n    onClick,\n    disabled,\n}: Props) => {\n    return (\n        <Wrapper type={type} onClick={onClick} disabled={disabled}>\n            <GridWrapper>{children}</GridWrapper>\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    type?: string;\n    disabled?: boolean;\n    onClick: Function;\n    children: string | VNode;\n}\n\nButton.propTypes = {\n    type: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    children: PropTypes.any.isRequired,\n};\n\nButton.defaultProps = {\n    type: 'button',\n    disabled: false,\n};\n","import { AppState } from '@/store';\nimport { callAction, mergeState } from '@/common/utils/store';\nimport { adminKeyLocalStorageKeyName } from './database.constants';\nimport { Client } from 'faunadb';\nimport { selectAdminKey } from '@/modules/database/database.selectors';\nimport { DatabaseState } from '@/modules/database/database.state';\nimport { overlayActions } from '@/modules/overlay/overlay.actions';\n\nconst merge = mergeState<DatabaseState>('database');\n\nexport const databaseActions = {\n    setClient: async (\n        appState: AppState,\n        masterKey: string,\n        adminKey: string\n    ): Promise<Partial<AppState>> => {\n        const { setupClient } = await import('./database.service');\n        const { encrypt, decrypt } = await import(\n            '@/modules/cipher/cipher.service'\n        );\n\n        try {\n            const decryptedAdminKey =\n                adminKey === selectAdminKey()\n                    ? (decrypt(adminKey, masterKey) as string)\n                    : adminKey;\n\n            const client: Client = await setupClient({\n                secret: decryptedAdminKey,\n            });\n\n            const encryptedAdminKey = encrypt(decryptedAdminKey, masterKey);\n            localStorage.setItem(\n                adminKeyLocalStorageKeyName,\n                encryptedAdminKey\n            );\n            return merge({ client });\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotConnectToDB',\n                'error'\n            );\n            return merge({});\n        }\n    },\n};\n","import { AppState, store } from '@/store';\nimport { Client } from 'faunadb';\nimport { callAction, mergeState } from '@/common/utils/store';\nimport { databaseActions } from '@/modules/database/database.actions';\nimport {\n    selectIsClientSet,\n    selectClient,\n} from '@/modules/database/database.selectors';\nimport {\n    OptionsPanelVariantName,\n    optionsPanelVariantNames,\n    PasswordEntityPayload,\n    PasswordEntityPayloadReferable,\n} from '@/modules/passwordList/passwordList.constants';\nimport { PasswordListState } from '@/modules/passwordList/passwordList.state';\nimport { overlayActions } from '@/modules/overlay/overlay.actions';\n\nconst merge = mergeState<PasswordListState>('passwordList');\n\nexport const passwordListActions = {\n    switchOptionPanelVariant: (\n        appState: AppState,\n        optionPanelVariantName: OptionsPanelVariantName\n    ): Partial<AppState> => {\n        return merge({\n            currentOptionPanelVariantName: optionPanelVariantName,\n        });\n    },\n    resetSelectedAndDecryptedEntity: (): Partial<AppState> => {\n        return merge({\n            selectedAndDecryptedEntity: {} as PasswordEntityPayloadReferable,\n        });\n    },\n    setSelectedAndDecryptedEntity: (\n        appState: AppState,\n        entity: PasswordEntityPayloadReferable\n    ): Partial<AppState> => {\n        return merge({\n            selectedAndDecryptedEntity: entity,\n        });\n    },\n    fetchPasswords: async (\n        appState: AppState,\n        masterKey: string,\n        adminKey: string,\n        forceReconnect = false\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { fetchAllPasswordEntities } = await import(\n            '@/modules/database/database.service'\n        );\n\n        if (!selectIsClientSet(appState) || forceReconnect) {\n            await callAction(databaseActions.setClient, masterKey, adminKey);\n        }\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const passwords = await fetchAllPasswordEntities(client);\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.passwordsFetchedSuccessfully',\n                'success'\n            );\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n\n            return merge({ passwords });\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotFetchPasswords',\n                'error'\n            );\n            return merge({});\n        }\n    },\n    addNewPassword: async (\n        appState: AppState,\n        newEntityPayload: PasswordEntityPayload,\n        masterKey: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { createPasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n        const { encrypt } = await import('@/modules/cipher/cipher.service');\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const encryptedPasswordEntity = encrypt(\n                {\n                    login: newEntityPayload.login,\n                    password: newEntityPayload.password,\n                },\n                masterKey,\n                true\n            );\n            await createPasswordEntity(client, {\n                label: newEntityPayload.label,\n                value: encryptedPasswordEntity,\n            });\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotCreateNewPassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n    editPassword: async (\n        appState: AppState,\n        entityPayload: PasswordEntityPayloadReferable,\n        masterKey: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { updatePasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n        const { encrypt } = await import('@/modules/cipher/cipher.service');\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const encryptedPasswordEntity = encrypt(\n                {\n                    login: entityPayload.login,\n                    password: entityPayload.password,\n                },\n                masterKey,\n                true\n            );\n            await updatePasswordEntity(client, entityPayload.refId, {\n                label: entityPayload.label,\n                value: encryptedPasswordEntity,\n            });\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(passwordListActions.resetSelectedAndDecryptedEntity);\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotEditPassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n    removePassword: async (\n        appState: AppState,\n        refId: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { deletePasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            await deletePasswordEntity(client, refId);\n            callAction(overlayActions.hideGlobalLoader);\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotRemovePassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography, media, stylelint } from '@/common/theme';\nsetPragma(h);\n\n// Due to bugs, (button shouldn't be displayed both grid & flex)\n// More: https://github.com/rachelandrew/gridbugs#10-some-html-elements-cant-be-grid-containers\n// https://github.com/philipwalton/flexbugs#flexbug-9\nexport const Wrapper = styled('button')`\n    ${typography.text14}\n    padding: ${theme.spacing.s12};\n    min-width: 100px;\n    max-width: 360px;\n    text-transform: uppercase;\n    background: ${theme.colors.primaryBlue};\n    box-shadow: ${theme.shadows.clickableItem};\n\n    &:focus {\n        border: none;\n        outline: none;\n    }\n\n    &:active {\n        box-shadow: none;\n    }\n\n    &:disabled {\n        box-shadow: none;\n        background: ${theme.colors.gray};\n    }\n\n    &:hover:enabled {\n        cursor: pointer;\n\n        * {\n            text-decoration: underline;\n        }\n    }\n\n    ${media.gte(theme.breakpoints.s375)(stylelint.css`\n        ${typography.text16}\n        padding: ${theme.spacing.s12} ${theme.spacing.m18};\n    `)}\n\n    ${media.gte(theme.breakpoints.s480)(stylelint.css`\n        ${typography.text18}\n        padding: ${theme.spacing.s12} ${theme.spacing.xl30};\n    `)}\n`;\n\nexport const GridWrapper = styled('span')`\n    display: grid;\n    place-items: center;\n    color: ${theme.colors.white};\n    white-space: nowrap;\n`;\n","export const masterKey = (val?: string) => {\n    return (val && val.length >= 8) || 'optionsPanel.masterKeyTooShort';\n};\n\nexport const encryptionKey = (val?: string) => {\n    return (val && val.length >= 8) || 'optionsPanel.encryptionKeyTooShort';\n};\n\nexport const label = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.labelTooShort';\n};\n\nexport const login = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.loginTooShort';\n};\n\nexport const password = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.passwordTooShort';\n};\n\nexport const adminKey = (val?: string): boolean | string => {\n    return (val && val.length >= 20) || 'settings.adminKeyTooShort';\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography } from '@/common/theme';\nsetPragma(h);\n\nexport const Wrapper = styled('section')`\n    display: grid;\n`;\n\nexport const LabelWrapper = styled('div')`\n    ${typography.text18}\n    font-family: ${theme.fontFamilies.bold};\n    color: ${theme.colors.darkBlue};\n    margin-bottom: ${theme.spacing.xs6};\n`;\n\nexport const InputWrapper = styled('div')`\n    margin-bottom: ${theme.spacing.xs6};\n`;\nexport const ErrorWrapper = styled('div')`\n    ${typography.text18}\n    color: ${theme.colors.red};\n`;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport {\n    Wrapper,\n    LabelWrapper,\n    InputWrapper,\n    ErrorWrapper,\n} from './formControl.styles';\n\nexport const FormControl: TypedComponent<Props> = ({\n    hasError,\n    renderLabel,\n    renderInput,\n    renderError,\n}: Props) => {\n    return (\n        <Wrapper>\n            <LabelWrapper>{renderLabel()}</LabelWrapper>\n            <InputWrapper>{renderInput()}</InputWrapper>\n            {hasError && <ErrorWrapper>{renderError()}</ErrorWrapper>}\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    hasError: string | boolean;\n    renderInput: Function;\n    renderLabel: Function;\n    renderError: Function;\n}\n\nFormControl.propTypes = {\n    hasError: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n        .isRequired,\n    renderLabel: PropTypes.func.isRequired,\n    renderInput: PropTypes.func.isRequired,\n    renderError: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, stylelint, typography } from '@/common/theme';\nsetPragma(h);\n\nconst standard = stylelint.css`\n    border: 1px solid ${theme.colors.primaryBlue};\n\n    &:focus {\n        box-shadow: 0 0 0 2px ${theme.colors.primaryBlue} inset;\n    }\n`;\n\nconst withError = stylelint.css`\n    border: 1px solid ${theme.colors.red};\n    color: ${theme.colors.red};\n\n    &:focus {\n        box-shadow: 0 0 0 2px ${theme.colors.red} inset;\n    }\n`;\n\nexport const Wrapper = styled('input')`\n    ${typography.text18}\n    padding: ${theme.spacing.s12};\n    width: 100%;\n    min-width: 240px;\n    color: ${theme.colors.darkBlue};\n    box-shadow: ${theme.shadows.clickableItem};\n    outline: none;\n\n    &:hover {\n        text-decoration: underline;\n    }\n\n    ${({ hasError }: { hasError: boolean }): string =>\n        hasError ? withError : standard}\n`;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './textInput.styles';\n\nexport const TextInput: TypedComponent<Props> = ({\n    value,\n    onInput,\n    placeholder,\n    hasError,\n    name,\n    type,\n}: Props) => {\n    return (\n        <Wrapper\n            type={type}\n            value={value}\n            onInput={onInput}\n            placeholder={placeholder}\n            hasError={hasError}\n            name={name}\n        />\n    );\n};\n\ninterface Props {\n    onInput: Function;\n    value?: string;\n    placeholder?: string;\n    hasError?: boolean;\n    name?: string;\n    type?: string;\n}\n\nTextInput.propTypes = {\n    onInput: PropTypes.func.isRequired,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    hasError: PropTypes.bool,\n    name: PropTypes.string,\n    type: PropTypes.string,\n};\n\nTextInput.defaultProps = {\n    value: '',\n    placeholder: '',\n    hasError: false,\n    name: '',\n    type: 'text',\n};\n","export function serialize(form) {\n\tvar i=0, j, key, tmp, out={};\n\tvar rgx1 = /(radio|checkbox)/i;\n\tvar rgx2 = /(file|reset|submit|button)/i;\n\n\twhile (tmp = form.elements[i++]) {\n\t\t// Ignore unnamed, disabled, or (...rgx2) inputs\n\t\tif (!tmp.name || tmp.disabled || rgx2.test(tmp.type)) continue;\n\n\t\tkey = tmp.name;\n\n\t\t// Grab all values from multi-select\n\t\tif (tmp.type === 'select-multiple') {\n\t\t\tout[key] = [];\n\t\t\tfor (j=0; j < tmp.options.length; j++) {\n\t\t\t\tif (tmp.options[j].selected) {\n\t\t\t\t\tout[key].push(tmp.options[j].value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (rgx1.test(tmp.type)) {\n\t\t\tif (tmp.checked) {\n\t\t\t\tj = out[key];\n\t\t\t\ttmp = tmp.value === 'on' || tmp.value;\n\t\t\t\tout[key] = (j == null && j !== 0) ? tmp : [].concat(j, tmp);\n\t\t\t}\n\t\t} else if (tmp.value || tmp.value === 0) {\n\t\t\tj = out[key];\n\t\t\tout[key] = (j == null && j !== 0) ? tmp.value : [].concat(j, tmp.value);\n\t\t}\n\t}\n\n\treturn out;\n}\n\nexport function validate(form, rules, toCheck) {\n\trules = rules || {};\n\tvar nxt, arr, isOkay=true, out={};\n\tvar k, msg, len, data=serialize(form);\n\n\tif (toCheck && toCheck.trim) {\n\t\tnxt = {};\n\t\tnxt[toCheck] = rules[toCheck];\n\t\trules = nxt;\n\t}\n\n\tfor (k in rules) {\n\t\t// Accomodate Function or RegExp\n\t\tmsg = (rules[k].test || rules[k]).call(rules[k], data[k], data);\n\t\t// Accomodate radio|checkbox groups\n\t\tnxt = form.elements[k];\n\t\tarr = nxt.length ? nxt : [nxt];\n\t\tfor (len=arr.length; len--;) {\n\t\t\tarr[len].isValid = (msg === true) || (out[k]=msg,isOkay=false);\n\t\t}\n\t}\n\n\tform.isValid = isOkay;\n\n\treturn out;\n}\n\nexport function bind(form, opts) {\n\topts = opts || {};\n\n\tform.serialize = serialize.bind(null, form);\n\tform.validate = validate.bind(null, form, opts.rules);\n\n\tform.onsubmit = function (ev) {\n\t\tev.preventDefault();\n\t\tev.errors = form.errors = form.validate();\n\t\treturn form.isValid ? opts.onSubmit(ev) : opts.onError(ev);\n\t};\n\n\treturn form;\n}\n","import { RefObject } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { validate } from 'formee';\n\ntype InputEventHandler = (event: Event) => void;\n\nexport const validateInputField = (\n    fieldName: string,\n    formRef: RefObject<HTMLFormElement>,\n    formValidation: { [key: string]: (val: string) => boolean | string },\n    valueSetter: (val: string) => void,\n    errorSetter: (errorMsg: string) => void\n): InputEventHandler => (event: Event): void => {\n    const errors: { [key: string]: any } = validate(\n        formRef.current as HTMLFormElement,\n        formValidation\n    );\n    const value = (event.target as HTMLInputElement).value;\n    const defaultValue = '';\n\n    valueSetter(value ?? defaultValue);\n    errorSetter(errors[fieldName] ?? defaultValue);\n};\n\nexport interface FormTextInputState {\n    value: string;\n    setValue: (value: string) => void;\n    errors: string;\n    setErrors: (value: string) => void;\n}\n\nexport interface FormTextInputProps {\n    name: string;\n    value: string;\n    hasError: boolean;\n    onInput: Function;\n}\n\nexport const useInputFormControl = (\n    formRef: RefObject<HTMLFormElement>,\n    formValidation: { [key: string]: (val: string) => boolean | string },\n    fieldName: string,\n    defaultValue = ''\n): [FormTextInputState, FormTextInputProps] => {\n    const [value, setValue] = useState(defaultValue);\n    const [errors, setErrors] = useState('');\n\n    return [\n        { value, setValue, errors, setErrors },\n        {\n            name: fieldName,\n            value,\n            hasError: Boolean(errors),\n            onInput: validateInputField(\n                fieldName,\n                formRef,\n                formValidation,\n                setValue,\n                setErrors\n            ),\n        },\n    ];\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { media, stylelint, theme, typography } from '@/common/theme';\nsetPragma(h);\n\nexport const PasswordEntityWrapper = styled('li')`\n    margin-bottom: ${theme.spacing.s12};\n`;\n\nexport const Wrapper = styled('section')`\n    padding-top: 100px;\n\n    ${PasswordEntityWrapper}:last-of-type {\n        margin-bottom: 0;\n    }\n`;\n\nexport const OptionsPanelWrapper = styled('div')`\n    display: grid;\n    justify-items: center;\n    margin-bottom: ${theme.spacing.s12};\n`;\n\nexport const Placeholder = styled('div')`\n    display: grid;\n    place-items: center;\n    padding: 140px 0 0 0;\n\n    ${media.gte(theme.breakpoints.s480)(stylelint.css`\n        padding: 170px 0 0 0;\n    `)}\n`;\n\nexport const PlaceholderTextWrapper = styled('div')`\n    ${typography.text20}\n    text-align: center;\n    color: ${theme.colors.darkBlue};\n    padding: ${theme.spacing.l24} 0;\n\n    ${media.gte(theme.breakpoints.s480)(stylelint.css`\n        ${typography.text24}\n    `)}\n`;\n\nexport const IconSizer = styled('div')`\n    margin: 0 auto;\n\n    img {\n        width: 100px;\n        height: 100px;\n    }\n\n    ${media.gte(theme.breakpoints.s480)(stylelint.css`\n        img {\n            width: 200px;\n            height: 200px;\n        }\n    `)}\n`;\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { stylelint, theme } from '@/common/theme';\nimport {\n    optionsPanelVariantNames,\n    OptionsPanelVariantName,\n} from '@/modules/passwordList/passwordList.constants';\nsetPragma(h);\n\nconst getBorderStyle = ({\n    currentVariantName,\n}: {\n    currentVariantName: OptionsPanelVariantName;\n}): string => {\n    switch (currentVariantName) {\n        case optionsPanelVariantNames.connectCollapsed:\n        case optionsPanelVariantNames.entityFormCollapsed:\n            return `border: 2px solid ${theme.colors.pastelGreen};`;\n        case optionsPanelVariantNames.connectExpanded:\n        case optionsPanelVariantNames.entityFormExpanded:\n            return `border: 2px solid ${theme.colors.significantGreen};`;\n    }\n\n    return `border: 2px solid ${theme.colors.pastelGreen};`;\n};\n\nexport const Wrapper = styled('section')`\n    ${getBorderStyle}\n    z-index: ${theme.zIndexes.xs};\n    position: absolute;\n    top: 76px;\n    left: 50%;\n    transform: translateX(-50%);\n    width: calc(100% - 36px);\n    max-width: ${theme.breakpoints.s480};\n    background: ${theme.colors.white};\n    padding: ${theme.spacing.m18};\n`;\n\nexport const ContentWrapper = styled('div')``;\n\nexport const Content = styled('div')`\n    padding-bottom: ${theme.spacing.m18};\n`;\n\nconst renderDot = ({ isInEditMode }: { isInEditMode: boolean }) => {\n    if (isInEditMode) {\n        return stylelint.css`\n        &::after {\n            content: '•';\n            font-size: ${theme.fontSizes.xl32};\n            color: ${theme.colors.significantGreen};\n            display: inline-block;\n            position: relative;\n            top: -20px;\n            left: 8px;\n        }`;\n    }\n};\n\nexport const ButtonWrapper = styled('div')`\n    display: flex;\n    justify-content: center;\n\n    button {\n        width: 100%;\n    }\n\n    button:first-of-type {\n        margin-right: ${theme.spacing.xl30};\n    }\n\n    ${renderDot}\n`;\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nsetPragma(h);\n\nexport const Wrapper = styled('section')``;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport { route } from 'preact-router';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './optionsPanelConnectCollapsed.styles';\nimport { ButtonWrapper } from '../optionsPanel.styles';\nimport { VariantProps } from '../optionsPanel.component';\nimport { optionsPanelVariantNames } from '@/modules/passwordList/passwordList.constants';\nimport { Button } from '@/common/components/button';\nimport { Text } from '@/modules/localisation/components/text';\n\nexport const OptionsPanelConnectCollapsed: TypedComponent<VariantProps> = ({\n    switchCurrentVariantName,\n}: VariantProps) => {\n    const handleSettingsClick = (): void => {\n        route('/settings');\n    };\n    const handleDecodeClick = (): void =>\n        switchCurrentVariantName(optionsPanelVariantNames.connectExpanded);\n\n    return (\n        <Wrapper>\n            <ButtonWrapper>\n                <Button onClick={handleSettingsClick}>\n                    <Text>optionsPanel.settings</Text>\n                </Button>\n                <Button onClick={handleDecodeClick}>\n                    <Text>optionsPanel.connect</Text>\n                </Button>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nOptionsPanelConnectCollapsed.propTypes = {\n    switchCurrentVariantName: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nsetPragma(h);\n\nexport const Wrapper = styled('section')``;\n","import { h, VNode } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './optionsPanelConnectExpanded.styles';\nimport { ButtonWrapper, Content, ContentWrapper } from '../optionsPanel.styles';\nimport { Button } from '@/common/components/button';\nimport { Text } from '@/modules/localisation/components/text';\nimport { VariantProps } from '../optionsPanel.component';\nimport { optionsPanelVariantNames } from '@/modules/passwordList/passwordList.constants';\nimport { FormControl } from '@/common/components/formControl';\nimport { TextInput } from '@/common/components/textInput';\nimport { useRef } from 'preact/hooks';\nimport { useAction, useSelector } from '@/store';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport { selectAdminKey } from '@/modules/database/database.selectors';\nimport { masterKey } from '@/common/utils/formValidators';\nimport { useInputFormControl } from '@/common/utils/form';\n\nconst formValidation = { masterKey } as const;\n\nexport const OptionsPanelConnectExpanded: TypedComponent<VariantProps> = ({\n    switchCurrentVariantName,\n}: VariantProps) => {\n    const encryptedAdminKey = useSelector(selectAdminKey);\n    const fetchPasswords = useAction(passwordListActions.fetchPasswords);\n    const formRef = useRef(undefined as any);\n    const [masterKeyInputState, masterKeyInputProps] = useInputFormControl(\n        formRef,\n        formValidation,\n        'masterKey'\n    );\n\n    const handleCancelClick = (): void =>\n        switchCurrentVariantName(optionsPanelVariantNames.connectCollapsed);\n\n    const handleConfirmClick = async (e: Event): Promise<void> => {\n        e.preventDefault();\n\n        if (formRef.current?.isValid) {\n            fetchPasswords(masterKeyInputState.value, encryptedAdminKey);\n        }\n    };\n\n    const renderInput = (): VNode => (\n        <TextInput\n            type=\"password\"\n            placeholder=\"e.g. MyStrongPassword1234\"\n            {...masterKeyInputProps}\n        />\n    );\n\n    const renderLabel = (): VNode => <Text>optionsPanel.enterMasterKey</Text>;\n    const renderError = (): VNode => <Text>{masterKeyInputState.errors}</Text>;\n    return (\n        <Wrapper>\n            <ContentWrapper>\n                <Content>\n                    <form ref={formRef} onSubmit={handleConfirmClick}>\n                        <FormControl\n                            hasError={masterKeyInputProps.hasError}\n                            renderLabel={renderLabel}\n                            renderInput={renderInput}\n                            renderError={renderError}\n                        />\n                    </form>\n                </Content>\n            </ContentWrapper>\n            <ButtonWrapper>\n                <Button onClick={handleCancelClick}>\n                    <Text>optionsPanel.cancel</Text>\n                </Button>\n                <Button\n                    onClick={handleConfirmClick}\n                    disabled={!formRef.current?.isValid}\n                >\n                    <Text>optionsPanel.confirm</Text>\n                </Button>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nOptionsPanelConnectExpanded.propTypes = {\n    switchCurrentVariantName: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nsetPragma(h);\n\nexport const Wrapper = styled('section')``;\n","import { createSelector } from 'reselect';\nimport { AppState } from '@/store';\nimport { PasswordListState } from './passwordList.state';\nimport { PasswordEntityPayloadReferable } from '@/modules/passwordList/passwordList.constants';\n\nconst selectPasswordList = (state: AppState): PasswordListState =>\n    state.passwordList;\n\nexport const selectPasswords = createSelector(\n    selectPasswordList,\n    (passwordListState: PasswordListState) => passwordListState.passwords\n);\n\nexport const selectCurrentOptionPanelVariantName = createSelector(\n    selectPasswordList,\n    (passwordListState: PasswordListState) =>\n        passwordListState.currentOptionPanelVariantName\n);\n\nexport const selectSelectedAndDecryptedEntity = createSelector(\n    selectPasswordList,\n    (passwordListState: PasswordListState) =>\n        passwordListState.selectedAndDecryptedEntity\n);\n\nexport const selectIsInEditMode = createSelector(\n    selectSelectedAndDecryptedEntity,\n    (selectedAndDecryptedEntity: PasswordEntityPayloadReferable) =>\n        Object.keys(selectedAndDecryptedEntity).length !== 0\n);\n\nexport const selectSelectedAndDecryptedEntityByRefId = (refId: string) =>\n    createSelector(\n        selectSelectedAndDecryptedEntity,\n        (selectedAndDecryptedEntity: PasswordEntityPayloadReferable) => {\n            if (selectedAndDecryptedEntity.refId === refId) {\n                return selectedAndDecryptedEntity;\n            }\n\n            return {} as PasswordEntityPayloadReferable;\n        }\n    );\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './optionsPanelEntityFormCollapsed.styles';\nimport { VariantProps } from '../optionsPanel.component';\nimport { optionsPanelVariantNames } from '@/modules/passwordList/passwordList.constants';\nimport { ButtonWrapper } from '../optionsPanel.styles';\nimport { Button } from '@/common/components/button';\nimport { Text } from '@/modules/localisation/components/text';\nimport { route } from 'preact-router';\nimport { useSelector } from '@preact-hooks/unistore';\nimport { selectIsInEditMode } from '@/modules/passwordList/passwordList.selectors';\n\nexport const OptionsPanelEntityFormCollapsed: TypedComponent<VariantProps> = ({\n    switchCurrentVariantName,\n}: VariantProps) => {\n    const isInEditMode = useSelector(selectIsInEditMode);\n    const actionLabel = isInEditMode\n        ? 'optionsPanel.edit'\n        : 'optionsPanel.addNew';\n\n    const handleSettingsClick = (): void => {\n        route('/settings');\n    };\n    const handleActionClick = (): void =>\n        switchCurrentVariantName(optionsPanelVariantNames.entityFormExpanded);\n\n    return (\n        <Wrapper>\n            <ButtonWrapper isInEditMode={isInEditMode}>\n                <Button onClick={handleSettingsClick}>\n                    <Text>optionsPanel.settings</Text>\n                </Button>\n                <Button onClick={handleActionClick}>\n                    <Text>{actionLabel}</Text>\n                </Button>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nOptionsPanelEntityFormCollapsed.propTypes = {\n    switchCurrentVariantName: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme } from '@/common/theme';\n\nsetPragma(h);\n\nexport const Wrapper = styled('section')``;\n\nexport const FormControlWrapper = styled('div')`\n    padding-bottom: ${theme.spacing.m18};\n`;\n\nexport const NoteLabelWrapper = styled('div')`\n    color: ${theme.colors.darkBlue};\n    font-style: italic;\n    padding-top: ${theme.spacing.xs6};\n`;\n","import { h, VNode, Fragment } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport {\n    Wrapper,\n    FormControlWrapper,\n    NoteLabelWrapper,\n} from './optionsPanelEntityFormExpanded.styles';\nimport { VariantProps } from '../optionsPanel.component';\nimport { optionsPanelVariantNames } from '@/modules/passwordList/passwordList.constants';\nimport { FormControl } from '@/common/components/formControl';\nimport { ButtonWrapper, Content, ContentWrapper } from '../optionsPanel.styles';\nimport { Button } from '@/common/components/button';\nimport { Text } from '@/modules/localisation/components/text';\nimport { useRef } from 'preact/hooks';\nimport { useInputFormControl } from '@/common/utils/form';\nimport { TextInput } from '@/common/components/textInput';\nimport { useAction, useSelector } from '@/store';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport {\n    label,\n    login,\n    password,\n    encryptionKey,\n} from '@/common/utils/formValidators';\nimport {\n    selectSelectedAndDecryptedEntity,\n    selectIsInEditMode,\n} from '@/modules/passwordList/passwordList.selectors';\nimport { selectAdminKey } from '@/modules/database/database.selectors';\nimport { renderIfTrue } from '@/common/utils/rendering';\n\nconst formValidation = {\n    label,\n    login,\n    password,\n    encryptionKey,\n} as const;\n\nexport const OptionsPanelEntityFormExpanded: TypedComponent<VariantProps> = ({\n    switchCurrentVariantName,\n}: VariantProps) => {\n    const encryptedAdminKey = useSelector(selectAdminKey);\n    const formRef = useRef(undefined as any);\n    const addNewPassword = useAction(passwordListActions.addNewPassword);\n    const editPassword = useAction(passwordListActions.editPassword);\n    const fetchPasswords = useAction(passwordListActions.fetchPasswords);\n\n    const editedEntity = useSelector(selectSelectedAndDecryptedEntity);\n    const isInEditMode = useSelector(selectIsInEditMode);\n    const actionLabel = isInEditMode ? 'optionsPanel.edit' : 'optionsPanel.add';\n\n    const useInputForm = (fieldName: string, defaultValue?: string) =>\n        useInputFormControl(formRef, formValidation, fieldName, defaultValue);\n\n    const [labelInputState, labelInputProps] = useInputForm(\n        'label',\n        editedEntity.label\n    );\n    const [loginInputState, loginInputProps] = useInputForm(\n        'login',\n        editedEntity.login\n    );\n    const [passwordInputState, passwordInputProps] = useInputForm(\n        'password',\n        editedEntity.password\n    );\n    const [encryptionKeyInputState, encryptionKeyInputProps] = useInputForm(\n        'encryptionKey'\n    );\n\n    const handleCancelClick = (): void =>\n        switchCurrentVariantName(optionsPanelVariantNames.entityFormCollapsed);\n\n    const handleAction = async (e: Event): Promise<void> => {\n        e.preventDefault();\n\n        if (!formRef.current?.isValid) {\n            return;\n        }\n\n        if (isInEditMode) {\n            await editPassword(\n                {\n                    label: labelInputState.value,\n                    login: loginInputState.value,\n                    password: passwordInputState.value,\n                    refId: editedEntity.refId,\n                },\n                encryptionKeyInputState.value\n            );\n        } else {\n            await addNewPassword(\n                {\n                    label: labelInputState.value,\n                    login: loginInputState.value,\n                    password: passwordInputState.value,\n                },\n                encryptionKeyInputState.value\n            );\n        }\n        fetchPasswords(encryptionKeyInputState.value, encryptedAdminKey);\n    };\n\n    const renderError = (errors: string) => (): VNode => <Text>{errors}</Text>;\n    const renderLabel = (label: string, noteText?: string) => (): VNode => (\n        <Fragment>\n            <Text>{label}</Text>\n            {renderIfTrue(() => (\n                <NoteLabelWrapper>\n                    <Text>settings.noteLabel</Text>{' '}\n                    <Text>{noteText as string}</Text>\n                </NoteLabelWrapper>\n            ))(Boolean(noteText))}\n        </Fragment>\n    );\n    return (\n        <Wrapper>\n            <ContentWrapper>\n                <Content>\n                    <form ref={formRef} onSubmit={handleAction}>\n                        <FormControlWrapper>\n                            <FormControl\n                                hasError={labelInputProps.hasError}\n                                renderLabel={renderLabel(\n                                    'optionsPanel.labelInputLabel'\n                                )}\n                                renderInput={(): VNode => (\n                                    <TextInput\n                                        placeholder=\"e.g. My Bank Account\"\n                                        {...labelInputProps}\n                                    />\n                                )}\n                                renderError={renderError(\n                                    labelInputState.errors\n                                )}\n                            />\n                        </FormControlWrapper>\n                        <FormControlWrapper>\n                            <FormControl\n                                hasError={loginInputProps.hasError}\n                                renderLabel={renderLabel(\n                                    'optionsPanel.loginInputLabel'\n                                )}\n                                renderInput={(): VNode => (\n                                    <TextInput\n                                        placeholder=\"e.g. yourmail@yourmail.com\"\n                                        {...loginInputProps}\n                                    />\n                                )}\n                                renderError={renderError(\n                                    loginInputState.errors\n                                )}\n                            />\n                        </FormControlWrapper>\n                        <FormControlWrapper>\n                            <FormControl\n                                hasError={passwordInputProps.hasError}\n                                renderLabel={renderLabel(\n                                    'optionsPanel.passwordInputLabel'\n                                )}\n                                renderInput={(): VNode => (\n                                    <TextInput\n                                        type=\"password\"\n                                        placeholder=\"e.g. myPassWord1234\"\n                                        {...passwordInputProps}\n                                    />\n                                )}\n                                renderError={renderError(\n                                    passwordInputState.errors\n                                )}\n                            />\n                        </FormControlWrapper>\n                        <FormControlWrapper>\n                            <FormControl\n                                hasError={encryptionKeyInputProps.hasError}\n                                renderLabel={renderLabel(\n                                    'optionsPanel.encryptionKey',\n                                    'optionsPanel.noteEncryptionKey'\n                                )}\n                                renderInput={(): VNode => (\n                                    <TextInput\n                                        type=\"password\"\n                                        placeholder=\"e.g. MyStrongPassword1234\"\n                                        {...encryptionKeyInputProps}\n                                    />\n                                )}\n                                renderError={renderError(\n                                    encryptionKeyInputState.errors\n                                )}\n                            />\n                        </FormControlWrapper>\n                        <input type=\"submit\" hidden />\n                    </form>\n                </Content>\n            </ContentWrapper>\n            <ButtonWrapper>\n                <Button onClick={handleCancelClick}>\n                    <Text>optionsPanel.cancel</Text>\n                </Button>\n                <Button\n                    onClick={handleAction}\n                    disabled={!formRef.current?.isValid}\n                >\n                    <Text>{actionLabel}</Text>\n                </Button>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nOptionsPanelEntityFormExpanded.propTypes = {\n    switchCurrentVariantName: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { useSelector, useAction } from '@/store';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport { Wrapper } from './optionsPanel.styles';\nimport { OptionsPanelConnectCollapsed } from './optionsPanelConnectCollapsed';\nimport { OptionsPanelConnectExpanded } from './optionsPanelConnectExpanded';\nimport { OptionsPanelEntityFormCollapsed } from './optionsPanelEntityFormCollapsed';\nimport { OptionsPanelEntityFormExpanded } from './optionsPanelEntityFormExpanded';\nimport { selectCurrentOptionPanelVariantName } from '@/modules/passwordList/passwordList.selectors';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport { OptionsPanelVariantName } from '@/modules/passwordList/passwordList.constants';\n\ntype VariantSwitcher = (destination: OptionsPanelVariantName) => void;\n\nexport interface VariantProps {\n    switchCurrentVariantName: VariantSwitcher;\n}\n\ntype VariantInstances = {\n    [key in OptionsPanelVariantName]: TypedComponent<VariantProps>;\n};\n\nexport const OptionsPanel: TypedComponent<Props> = () => {\n    const currentVariantName = useSelector(selectCurrentOptionPanelVariantName);\n    const setCurrentVariantName = useAction(\n        passwordListActions.switchOptionPanelVariant\n    );\n\n    const variants: VariantInstances = {\n        connectCollapsed: OptionsPanelConnectCollapsed,\n        connectExpanded: OptionsPanelConnectExpanded,\n        entityFormCollapsed: OptionsPanelEntityFormCollapsed,\n        entityFormExpanded: OptionsPanelEntityFormExpanded,\n    };\n\n    const CurrentVariant =\n        variants[currentVariantName as OptionsPanelVariantName];\n    return (\n        <Wrapper currentVariantName={currentVariantName}>\n            <CurrentVariant switchCurrentVariantName={setCurrentVariantName} />\n        </Wrapper>\n    );\n};\n\ninterface Props {}\n\nOptionsPanel.propTypes = {};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { stylelint, theme, typography } from '@/common/theme';\nsetPragma(h);\n\nexport const Row = styled('div')`\n    margin-bottom: ${theme.spacing.m18};\n`;\n\nconst selectedOutline = stylelint.css`\n    outline: ${theme.spacing.xxs2} solid ${theme.colors.significantGreen};\n`;\n\nexport const Wrapper = styled('button')`\n    width: 100%;\n    box-shadow: ${theme.shadows.clickableItem};\n    background: ${theme.colors.pastelGreen};\n    padding: ${theme.spacing.m18};\n    ${({ isSelected }: { isSelected: boolean }) =>\n        isSelected ? selectedOutline : 'outline: none;'}\n\n    ${Row}:last-of-type {\n        margin-bottom: 0;\n    }\n\n    &:hover {\n        cursor: pointer;\n\n        & > span {\n            text-decoration: underline;\n        }\n    }\n`;\n\nexport const GridWrapper = styled('span')`\n    display: grid;\n    grid-auto-flow: column;\n    justify-content: space-between;\n`;\n\nexport const Label = styled('span')`\n    font-family: ${theme.fontFamilies.bold};\n    color: ${theme.colors.darkBlue};\n    ${typography.text18}\n`;\n\nexport const Value = styled('strong')`\n    color: ${theme.colors.darkBlue};\n    word-break: break-all;\n    ${typography.text18}\n`;\n\nexport const DataWrapper = styled('div')`\n    display: grid;\n    text-align: left;\n`;\n\nexport const ControlsWrapper = styled('div')`\n    display: grid;\n    align-content: space-between;\n`;\n\nexport const FormControlWrapper = styled('div')`\n    text-align: left;\n`;\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme } from '@/common/theme';\nimport { Wrapper as Button } from '@/common/components/button/button.styles';\nsetPragma(h);\n\nexport const Wrapper = styled(Button)`\n    padding: ${theme.spacing.xs6};\n    min-width: initial;\n`;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './iconButton.styles';\nimport { Icon } from '@/common/components/icon';\nimport { IconName } from '@/assets/icons';\nimport { GridWrapper } from '@/common/components/button/button.styles';\n\nexport const IconButton: TypedComponent<Props> = ({\n    iconName,\n    width,\n    height,\n    onClick,\n}: Props) => {\n    return (\n        <Wrapper onClick={onClick}>\n            <GridWrapper>\n                <Icon name={iconName} width={width} height={height} />\n            </GridWrapper>\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    iconName: IconName;\n    onClick: Function;\n    width?: number;\n    height?: number;\n}\n\nIconButton.propTypes = {\n    iconName: PropTypes.any.isRequired,\n    onClick: PropTypes.func.isRequired,\n    width: PropTypes.number,\n    height: PropTypes.number,\n};\n\nIconButton.defaultProps = {\n    width: 30,\n    height: 30,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography } from '@/common/theme';\nsetPragma(h);\n\nexport const Wrapper = styled('section')`\n    position: fixed;\n    z-index: ${theme.zIndexes.m};\n    top: 76px;\n    left: 50%;\n    transform: translateX(-50%);\n    display: grid;\n    width: 100%;\n    min-width: 320px;\n    max-width: 640px;\n    justify-items: center;\n    grid-auto-flow: row;\n    padding: ${theme.spacing.xl30} ${theme.spacing.m18};\n    border: 1px solid ${theme.colors.primaryBlue};\n    border-top: 4px solid ${theme.colors.primaryBlue};\n    background: ${theme.colors.white};\n`;\n\nexport const ContentWrapper = styled('div')`\n    ${typography.text18}\n    display: grid;\n    max-width: 480px;\n    width: 100%;\n    padding: 0 ${theme.spacing.xs6} ${theme.spacing.xs6};\n    margin-bottom: ${theme.spacing.m18};\n    text-align: center;\n`;\n\nexport const ControlsWrapper = styled('div')`\n    display: grid;\n    grid-gap: ${theme.spacing.xl30};\n    grid-auto-flow: column;\n`;\n","import { h, VNode } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper, ContentWrapper, ControlsWrapper } from './prompt.styles';\n\nexport const Prompt: TypedComponent<Props> = ({\n    renderContent,\n    renderControls,\n}: Props) => {\n    return (\n        <Wrapper onClick={(e: Event) => e.stopPropagation()}>\n            <ContentWrapper>{renderContent()}</ContentWrapper>\n            <ControlsWrapper>{renderControls()}</ControlsWrapper>\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    renderContent: () => VNode | string;\n    renderControls: () => VNode;\n}\n\nPrompt.propTypes = {\n    renderContent: PropTypes.func.isRequired,\n    renderControls: PropTypes.func.isRequired,\n};\n","import { h, Fragment } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport { valueof } from '@/common/typings/helpers';\nimport PropTypes from 'prop-types';\nimport {\n    Wrapper,\n    GridWrapper,\n    Row,\n    Label,\n    Value,\n    DataWrapper,\n    ControlsWrapper,\n    FormControlWrapper,\n} from './passwordEntity.styles';\nimport { Text } from '@/modules/localisation/components/text';\nimport {\n    placeholderEntityValue,\n    PasswordEntityVulnerablePayload,\n} from '@/modules/passwordList/passwordList.constants';\nimport { useRef, useState } from 'preact/hooks';\nimport { PasswordEntityRaw } from '@/modules/database/database.service';\nimport { IconButton } from '@/common/components/iconButton';\nimport { renderIfTrue } from '@/common/utils/rendering';\nimport { Prompt } from '@/modules/overlay/components/prompt';\nimport { useInputFormControl } from '@/common/utils/form';\nimport { encryptionKey } from '@/common/utils/formValidators';\nimport { FormControl } from '@/common/components/formControl';\nimport { TextInput } from '@/common/components/textInput';\nimport { Button } from '@/common/components/button';\nimport { useAction, useSelector } from '@/store';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport { selectSelectedAndDecryptedEntityByRefId } from '@/modules/passwordList/passwordList.selectors';\nimport { selectAdminKey } from '@/modules/database/database.selectors';\n\nconst formValidation = { encryptionKey } as const;\n\nconst promptTypes = {\n    invisible: '',\n    removal: 'removal',\n    decryption: 'decryption',\n} as const;\n\ntype PromptType = valueof<typeof promptTypes>;\n\nexport const PasswordEntity: TypedComponent<Props> = ({\n    data,\n    isSelected,\n    onClick,\n}: Props) => {\n    const formRef = useRef(undefined as any);\n    const [promptType, setPromptType] = useState<PromptType>(\n        promptTypes.invisible\n    );\n    const encryptedAdminKey = useSelector(selectAdminKey);\n    const selectedAndDecryptedEntity = useSelector(\n        selectSelectedAndDecryptedEntityByRefId(data.ref.id)\n    );\n    const passwordVisibility =\n        Object.keys(selectedAndDecryptedEntity).length !== 0;\n\n    const [\n        encryptionKeyInputState,\n        encryptionKeyInputProps,\n    ] = useInputFormControl(formRef, formValidation, 'encryptionKey');\n\n    const removePassword = useAction(passwordListActions.removePassword);\n    const fetchPasswords = useAction(passwordListActions.fetchPasswords);\n\n    const setSelectedAndDecryptedEntity = useAction(\n        passwordListActions.setSelectedAndDecryptedEntity\n    );\n    const resetSelectedAndDecryptedEntity = useAction(\n        passwordListActions.resetSelectedAndDecryptedEntity\n    );\n\n    const resetPromptState = (): void => {\n        setPromptType(promptTypes.invisible);\n        encryptionKeyInputState.setValue('');\n        encryptionKeyInputState.setErrors('');\n    };\n\n    const handleClick = (e: MouseEvent): void => {\n        if (e.detail === 0) {\n            // Firefox fix - ignore outclicking via ENTER key\n            return;\n        }\n\n        onClick(isSelected ? null : data);\n        resetSelectedAndDecryptedEntity();\n        resetPromptState();\n    };\n\n    const handleDecryptionPromptConfirm = async (): Promise<void> => {\n        const { decrypt } = await import('@/modules/cipher/cipher.service');\n        const { login, password } = decrypt(\n            data.data.value,\n            encryptionKeyInputState.value,\n            true\n        ) as PasswordEntityVulnerablePayload;\n\n        setSelectedAndDecryptedEntity({\n            refId: data.ref.id,\n            label: data.data.label,\n            login,\n            password,\n        });\n    };\n\n    const handleRemovalPromptConfirm = async (): Promise<void> => {\n        const { decrypt } = await import('@/modules/cipher/cipher.service');\n        // only to check if master key is known - not needed to removal operation itself\n        decrypt(\n            data.data.value,\n            encryptionKeyInputState.value,\n            true\n        ) as PasswordEntityVulnerablePayload;\n\n        await removePassword(data.ref.id);\n        fetchPasswords(encryptionKeyInputState.value, encryptedAdminKey);\n    };\n\n    const handlePromptConfirm = (e: Event): void => {\n        e.preventDefault();\n\n        if (!formRef.current?.isValid) {\n            return;\n        }\n\n        if (promptType === promptTypes.decryption) {\n            handleDecryptionPromptConfirm();\n        } else {\n            handleRemovalPromptConfirm();\n        }\n\n        resetPromptState();\n    };\n\n    const handleControlClick = (nextPromptType: PromptType) => (\n        e: Event\n    ): void => {\n        e.stopPropagation();\n        if (promptType) {\n            return;\n        }\n\n        setPromptType(nextPromptType);\n    };\n\n    const handleFilledEyeClick = (e: Event): void => {\n        e.stopPropagation();\n        resetSelectedAndDecryptedEntity();\n    };\n\n    const renderPrompt = renderIfTrue(() => {\n        const confirmBtnLabel =\n            promptType === promptTypes.decryption\n                ? 'prompt.decrypt'\n                : 'prompt.remove';\n        return (\n            <Prompt\n                renderContent={() => (\n                    <form ref={formRef} onSubmit={handlePromptConfirm}>\n                        <FormControlWrapper>\n                            <FormControl\n                                hasError={encryptionKeyInputProps.hasError}\n                                renderLabel={() => (\n                                    <Text>optionsPanel.enterEncryptionKey</Text>\n                                )}\n                                renderError={() => (\n                                    <Text>\n                                        {encryptionKeyInputState.errors}\n                                    </Text>\n                                )}\n                                renderInput={() => (\n                                    <TextInput\n                                        type=\"password\"\n                                        placeholder=\"e.g. MyStrongPassword1234\"\n                                        {...encryptionKeyInputProps}\n                                    />\n                                )}\n                            />\n                        </FormControlWrapper>\n                    </form>\n                )}\n                renderControls={() => (\n                    <Fragment>\n                        <Button onClick={resetPromptState}>\n                            <Text>optionsPanel.cancel</Text>\n                        </Button>\n                        <Button\n                            onClick={handlePromptConfirm}\n                            disabled={!formRef.current?.isValid}\n                        >\n                            <Text>{confirmBtnLabel}</Text>\n                        </Button>\n                    </Fragment>\n                )}\n            />\n        );\n    });\n\n    const renderEyeIcon = () => {\n        if (passwordVisibility) {\n            return (\n                <IconButton\n                    iconName=\"eyeFilled\"\n                    onClick={handleFilledEyeClick}\n                />\n            );\n        }\n        return (\n            <IconButton\n                iconName=\"eye\"\n                onClick={handleControlClick(promptTypes.decryption)}\n            />\n        );\n    };\n\n    const renderControls = renderIfTrue(() => {\n        return (\n            <Fragment>\n                <IconButton\n                    iconName=\"bin\"\n                    onClick={handleControlClick(promptTypes.removal)}\n                />\n                {renderEyeIcon()}\n            </Fragment>\n        );\n    });\n\n    return (\n        <Wrapper onClick={handleClick} isSelected={isSelected}>\n            <GridWrapper>\n                <DataWrapper>\n                    <Row>\n                        <Label>\n                            <Text>passwordEntity.label</Text>\n                        </Label>{' '}\n                        - <Value>{data.data.label}</Value>\n                    </Row>\n                    <Row>\n                        <Label>\n                            <Text>passwordEntity.login</Text>\n                        </Label>{' '}\n                        -{' '}\n                        <Value>\n                            {selectedAndDecryptedEntity.login ??\n                                placeholderEntityValue}\n                        </Value>\n                    </Row>\n                    <Row>\n                        <Label>\n                            <Text>passwordEntity.password</Text>\n                        </Label>{' '}\n                        -{' '}\n                        <Value>\n                            {selectedAndDecryptedEntity.password ??\n                                placeholderEntityValue}\n                        </Value>\n                    </Row>\n                </DataWrapper>\n                <ControlsWrapper>{renderControls(isSelected)}</ControlsWrapper>\n            </GridWrapper>\n            {renderPrompt(Boolean(promptType) && isSelected)}\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    isSelected: boolean;\n    data: PasswordEntityRaw;\n    onClick: Function;\n}\n\nPasswordEntity.propTypes = {\n    isSelected: PropTypes.bool.isRequired,\n    data: PropTypes.any.isRequired,\n    onClick: PropTypes.func.isRequired,\n};\n","import { h, VNode } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport { useSelector, useAction } from '@/store';\nimport {\n    Wrapper,\n    PasswordEntityWrapper,\n    OptionsPanelWrapper,\n    Placeholder,\n    PlaceholderTextWrapper,\n    IconSizer,\n} from './passwordList.styles';\nimport {\n    selectIsClientSet,\n    selectIsFirstTimeOnDevice,\n} from '@/modules/database/database.selectors';\nimport { route } from 'preact-router';\nimport { useEffect, useState } from 'preact/hooks';\nimport { OptionsPanel } from '@/modules/passwordList/components/optionsPanel';\nimport { selectPasswords } from '@/modules/passwordList/passwordList.selectors';\nimport { PasswordEntityRaw } from '@/modules/database/database.service';\nimport { PasswordEntity } from '@/modules/passwordList/components/passwordEntity';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport { optionsPanelVariantNames } from '@/modules/passwordList/passwordList.constants';\nimport { renderIfTrue } from '@/common/utils/rendering';\nimport { Icon } from '@/common/components/icon';\nimport { Text } from '@/modules/localisation/components/text';\nimport { selectIsGlobalLoaderVisible } from '@/modules/overlay/overlay.selectors';\n\nexport const useFirstTimeRedirection = (): void => {\n    useEffect(() => {\n        const isFirstTimeOnDevice = useSelector(selectIsFirstTimeOnDevice);\n\n        if (isFirstTimeOnDevice && !(window as any).prerendering) {\n            // User has to be connected to database before accessing /app page\n            setTimeout(() => {\n                route('/settings');\n            });\n        }\n    }, []);\n};\n\nexport const PasswordList: TypedComponent<Props> = () => {\n    useFirstTimeRedirection();\n    const passwords = useSelector(selectPasswords);\n    const isClientSet = useSelector(selectIsClientSet);\n    const isGlobalLoaderVisible = useSelector(selectIsGlobalLoaderVisible);\n    const shouldRenderPlaceholder =\n        !isClientSet ||\n        (isClientSet && !isGlobalLoaderVisible && !Boolean(passwords.length));\n    const switchOptionsPanelVariant = useAction(\n        passwordListActions.switchOptionPanelVariant\n    );\n    const [\n        selectedEntity,\n        setSelectedEntity,\n    ] = useState<PasswordEntityRaw | null>(null);\n\n    useEffect(() => {\n        if (isClientSet) {\n            switchOptionsPanelVariant(\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n        }\n    }, []);\n\n    const renderPasswords = (): VNode[] => {\n        return passwords.map(\n            (entity: PasswordEntityRaw): VNode => (\n                <PasswordEntityWrapper key={entity.ref.id}>\n                    <PasswordEntity\n                        data={entity}\n                        isSelected={selectedEntity === entity}\n                        onClick={setSelectedEntity}\n                    />\n                </PasswordEntityWrapper>\n            )\n        );\n    };\n\n    const renderPlaceholder = renderIfTrue(\n        (): VNode => {\n            const iconName = isClientSet ? 'database' : 'padlock';\n            const text = isClientSet\n                ? 'passwordList.noDataPlaceholder'\n                : 'passwordList.connectionPlaceholder';\n            return (\n                <Placeholder>\n                    <IconSizer>\n                        <Icon name={iconName} />\n                    </IconSizer>\n                    <PlaceholderTextWrapper>\n                        <Text>{text}</Text>\n                    </PlaceholderTextWrapper>\n                </Placeholder>\n            );\n        }\n    );\n\n    return (\n        <Wrapper>\n            <OptionsPanelWrapper>\n                <OptionsPanel />\n            </OptionsPanelWrapper>\n            <ul>{renderPasswords()}</ul>\n            {renderPlaceholder(shouldRenderPlaceholder)}\n        </Wrapper>\n    );\n};\n\nexport interface Props {}\n"],"sourceRoot":""}