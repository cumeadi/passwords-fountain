{"version":3,"sources":["webpack:///./src/common/components/button/button.component.tsx","webpack:///./src/modules/database/database.actions.ts","webpack:///./src/modules/passwordList/passwordList.actions.ts","webpack:///./src/common/components/button/button.styles.ts","webpack:///./src/common/utils/formValidators.ts","webpack:///./src/common/components/formControl/formControl.styles.ts","webpack:///./src/common/components/formControl/formControl.component.tsx","webpack:///./src/common/components/textInput/textInput.styles.ts","webpack:///./src/common/components/textInput/textInput.component.tsx","webpack:///./node_modules/formee/dist/formee.mjs","webpack:///./src/common/utils/form.ts","webpack:///./src/routes/settings/settings.styles.ts","webpack:///./src/routes/settings/settings.tsx"],"names":["Button","type","children","onClick","disabled","propTypes","PropTypes","string","bool","func","isRequired","any","defaultProps","merge","mergeState","databaseActions","async","appState","masterKey","adminKey","setupClient","encrypt","decrypt","decryptedAdminKey","selectAdminKey","client","secret","encryptedAdminKey","localStorage","setItem","adminKeyLocalStorageKeyName","err","callAction","overlayActions","hideGlobalLoader","showSnackbar","passwordListActions","switchOptionPanelVariant","optionPanelVariantName","currentOptionPanelVariantName","resetSelectedAndDecryptedEntity","selectedAndDecryptedEntity","setSelectedAndDecryptedEntity","entity","fetchPasswords","forceReconnect","showGlobalLoader","fetchAllPasswordEntities","selectIsClientSet","selectClient","store","getState","passwords","optionsPanelVariantNames","entityFormCollapsed","addNewPassword","newEntityPayload","createPasswordEntity","encryptedPasswordEntity","login","password","label","value","editPassword","entityPayload","updatePasswordEntity","refId","removePassword","deletePasswordEntity","setPragma","h","Wrapper","styled","typography","text14","theme","spacing","s12","colors","primaryBlue","shadows","clickableItem","gray","media","gte","breakpoints","s375","stylelint","css","text16","m18","s480","text18","xl30","GridWrapper","white","val","length","encryptionKey","LabelWrapper","fontFamilies","bold","darkBlue","xs6","InputWrapper","ErrorWrapper","red","FormControl","hasError","renderLabel","renderInput","renderError","oneOfType","standard","withError","TextInput","onInput","placeholder","name","serialize","form","j","key","tmp","i","out","rgx1","rgx2","elements","test","options","selected","push","checked","concat","validate","rules","toCheck","nxt","arr","k","msg","len","isOkay","data","trim","call","isValid","validateInputField","fieldName","formRef","formValidation","valueSetter","errorSetter","event","errors","current","target","useInputFormControl","defaultValue","setValue","useState","setErrors","Boolean","m880","xl40","Header","Heading","text24","FormWrapper","FormControlWrapper","DescriptiveText","regular","NoteLabelWrapper","ControlsWrapper","Settings","isFirstTimeOnDevice","useSelector","selectIsFirstTimeOnDevice","useAction","useRef","undefined","adminKeyInputState","adminKeyInputProps","masterKeyInputState","masterKeyInputProps","headingText","labelDescription","noteLabelDescription","shouldRenderNote","shouldRender","renderIfTrue","renderNoteLabel","error","ref","history","back","e","preventDefault","route"],"mappings":"gKAKO,MAAMA,EAAgC,EACzCC,OACAC,WACAC,UACAC,cAGI,YAAC,IAAD,CAASH,KAAMA,EAAME,QAASA,EAASC,SAAUA,GAC7C,YAAC,IAAD,KAAcF,IAY1BF,EAAOK,UAAY,CACfJ,KAAMK,IAAUC,OAChBH,SAAUE,IAAUE,KACpBL,QAASG,IAAUG,KAAKC,WACxBR,SAAUI,IAAUK,IAAID,YAG5BV,EAAOY,aAAe,CAClBX,KAAM,SACNG,UAAU,I,8GC1Bd,MAAMS,EAAQC,YAA0B,YAE3BC,EACEC,MACPC,EACAC,EACAC,KAEA,MAAM,YAAEC,SAAsB,qDACxB,QAAEC,EAAF,QAAWC,SAAkB,oDAInC,IACI,MAAMC,EACFJ,IAAaK,cACNF,EAAQH,EAAUD,GACnBC,EAEJM,QAAuBL,EAAY,CACrCM,OAAQH,IAGNI,EAAoBN,EAAQE,EAAmBL,GAKrD,OAJAU,aAAaC,QACTC,IACAH,GAEGd,EAAM,CAAEY,WACjB,MAAOM,GAOL,OANAC,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,+BACA,SAEGtB,EAAM,M,YC3BzB,MAAMA,EAAQC,YAA8B,gBAE/BsB,EAAsB,CAC/BC,yBAA0B,CACtBpB,EACAqB,IAEOzB,EAAM,CACT0B,8BAA+BD,IAGvCE,gCAAiC,IACtB3B,EAAM,CACT4B,2BAA4B,KAGpCC,8BAA+B,CAC3BzB,EACA0B,IAEO9B,EAAM,CACT4B,2BAA4BE,IAGpCC,eAAgB5B,MACZC,EACAC,EACAC,EACA0B,GAAiB,KAEjBb,YAAWC,IAAea,kBAC1B,MAAM,yBAAEC,SAAmC,oDAItCC,YAAkB/B,KAAa4B,SAC1Bb,YAAWjB,EAA2BG,EAAWC,GAG3D,MAAMM,EAASwB,YAAaC,IAAMC,YAElC,IACI,MAAMC,QAAkBL,EAAyBtB,GAYjD,OAXAO,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,wCACA,WAEJH,YACII,EAAoBC,yBACpBgB,IAAyBC,qBAGtBzC,EAAM,CAAEuC,cACjB,MAAOrB,GAOL,OANAC,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,kCACA,SAEGtB,EAAM,MAGrB0C,eAAgBvC,MACZC,EACAuC,EACAtC,KAEAc,YAAWC,IAAea,kBAC1B,MAAM,qBAAEW,SAA+B,qDAGjC,QAAEpC,SAAkB,oDAEpBI,EAASwB,YAAaC,IAAMC,YAElC,IACI,MAAMO,EAA0BrC,EAC5B,CACIsC,MAAOH,EAAiBG,MACxBC,SAAUJ,EAAiBI,UAE/B1C,GACA,SAEEuC,EAAqBhC,EAAQ,CAC/BoC,MAAOL,EAAiBK,MACxBC,MAAOJ,IAEX1B,YAAWC,IAAeC,kBAC1BF,YACII,EAAoBC,yBACpBgB,IAAyBC,qBAE/B,MAAOvB,GACLC,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,qCACA,SAvBR,QA0BI,OAAOtB,EAAM,MAGrBkD,aAAc/C,MACVC,EACA+C,EACA9C,KAEAc,YAAWC,IAAea,kBAC1B,MAAM,qBAAEmB,SAA+B,qDAGjC,QAAE5C,SAAkB,oDAEpBI,EAASwB,YAAaC,IAAMC,YAElC,IACI,MAAMO,EAA0BrC,EAC5B,CACIsC,MAAOK,EAAcL,MACrBC,SAAUI,EAAcJ,UAE5B1C,GACA,SAEE+C,EAAqBxC,EAAQuC,EAAcE,MAAO,CACpDL,MAAOG,EAAcH,MACrBC,MAAOJ,IAEX1B,YAAWC,IAAeC,kBAC1BF,YAAWI,EAAoBI,iCAC/BR,YACII,EAAoBC,yBACpBgB,IAAyBC,qBAE/B,MAAOvB,GACLC,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,gCACA,SAxBR,QA2BI,OAAOtB,EAAM,MAGrBsD,eAAgBnD,MACZC,EACAiD,KAEAlC,YAAWC,IAAea,kBAC1B,MAAM,qBAAEsB,SAA+B,oDAIjC3C,EAASwB,YAAaC,IAAMC,YAElC,UACUiB,EAAqB3C,EAAQyC,GACnClC,YAAWC,IAAeC,kBAC5B,MAAOH,GACLC,YAAWC,IAAeC,kBAC1BF,YACIC,IAAeE,aACf,kCACA,SARR,QAWI,OAAOtB,EAAM,Q,iCC7LzB,6FAGAwD,YAAUC,KAKH,MAAMC,EAAUC,YAAO,SAAU;MAClCC,IAAWC;eACFC,IAAMC,QAAQC;;;;kBAIXF,IAAMG,OAAOC;kBACbJ,IAAMK,QAAQC;;;;;;;;;;;;;sBAaVN,IAAMG,OAAOI;;;;;;;;;;;MAW7BC,IAAMC,IAAIT,IAAMU,YAAYC,KAA5BH,CAAkCI,IAAUC,GAAI;UAC5Cf,IAAWgB;mBACFd,IAAMC,QAAQC,OAAOF,IAAMC,QAAQc;;;MAGhDP,IAAMC,IAAIT,IAAMU,YAAYM,KAA5BR,CAAkCI,IAAUC,GAAI;UAC5Cf,IAAWmB;mBACFjB,IAAMC,QAAQC,OAAOF,IAAMC,QAAQiB;;EAIzCC,EAActB,YAAO,OAAQ;;;aAG7BG,IAAMG,OAAOiB;;oCCrD1B,4MAAO,MAAM7E,EAAa8E,GACdA,GAAOA,EAAIC,QAAU,GAAM,iCAG1BC,EAAiBF,GAClBA,GAAOA,EAAIC,QAAU,GAAM,qCAG1BpC,EAASmC,GACVA,GAAOA,EAAIC,QAAU,GAAM,6BAG1BtC,EAASqC,GACVA,GAAOA,EAAIC,QAAU,GAAM,6BAG1BrC,EAAYoC,GACbA,GAAOA,EAAIC,QAAU,GAAM,gCAG1B9E,EAAY6E,GACbA,GAAOA,EAAIC,QAAU,IAAO,6B,4GClBxC5B,YAAUC,KAEH,MAAMC,EAAUC,YAAO,UAAW;;EAI5B2B,EAAe3B,YAAO,MAAO;MACpCC,IAAWmB;mBACEjB,IAAMyB,aAAaC;aACzB1B,IAAMG,OAAOwB;qBACL3B,IAAMC,QAAQ2B;EAGtBC,EAAehC,YAAO,MAAO;qBACrBG,IAAMC,QAAQ2B;EAEtBE,EAAejC,YAAO,MAAO;MACpCC,IAAWmB;aACJjB,IAAMG,OAAO4B;ECXbC,EAAqC,EAC9CC,WACAC,cACAC,cACAC,iBAGI,YAACxC,EAAD,KACI,YAAC4B,EAAD,KAAeU,KACf,YAACL,EAAD,KAAeM,KACdF,GAAY,YAACH,EAAD,KAAeM,MAYxCJ,EAAYtG,UAAY,CACpBuG,SAAUtG,IAAU0G,UAAU,CAAC1G,IAAUC,OAAQD,IAAUE,OACtDE,WACLmG,YAAavG,IAAUG,KAAKC,WAC5BoG,YAAaxG,IAAUG,KAAKC,WAC5BqG,YAAazG,IAAUG,KAAKC,a,4GClChC2D,YAAUC,KAEV,MAAM2C,EAAW1B,IAAUC,GAAI;wBACPb,IAAMG,OAAOC;;;gCAGLJ,IAAMG,OAAOC;;EAIvCmC,EAAY3B,IAAUC,GAAI;wBACRb,IAAMG,OAAO4B;aACxB/B,IAAMG,OAAO4B;;;gCAGM/B,IAAMG,OAAO4B;;EAIhCnC,EAAUC,YAAO,QAAS;MACjCC,IAAWmB;eACFjB,IAAMC,QAAQC;;;aAGhBF,IAAMG,OAAOwB;kBACR3B,IAAMK,QAAQC;;;;;;;MAO1B,EAAG2B,cACDA,EAAWM,EAAYD;EC/BlBE,EAAmC,EAC5CrD,QACAsD,UACAC,cACAT,WACAU,OACArH,UAGI,YAACsE,EAAD,CACItE,KAAMA,EACN6D,MAAOA,EACPsD,QAASA,EACTC,YAAaA,EACbT,SAAUA,EACVU,KAAMA,IAclBH,EAAU9G,UAAY,CAClB+G,QAAS9G,IAAUG,KAAKC,WACxBoD,MAAOxD,IAAUC,OACjB8G,YAAa/G,IAAUC,OACvBqG,SAAUtG,IAAUE,KACpB8G,KAAMhH,IAAUC,OAChBN,KAAMK,IAAUC,QAGpB4G,EAAUvG,aAAe,CACrBkD,MAAO,GACPuD,YAAa,GACbT,UAAU,EACVU,KAAM,GACNrH,KAAM,S,8EChDH,SAASsH,EAAUC,GAKzB,IAJA,IAASC,EAAGC,EAAKC,EAAbC,EAAE,EAAgBC,EAAI,GACtBC,EAAO,oBACPC,EAAO,8BAEJJ,EAAMH,EAAKQ,SAASJ,MAE1B,GAAKD,EAAIL,OAAQK,EAAIvH,WAAY2H,EAAKE,KAAKN,EAAI1H,MAK/C,GAHAyH,EAAMC,EAAIL,KAGO,oBAAbK,EAAI1H,KAEP,IADA4H,EAAIH,GAAO,GACND,EAAE,EAAGA,EAAIE,EAAIO,QAAQjC,OAAQwB,IAC7BE,EAAIO,QAAQT,GAAGU,UAClBN,EAAIH,GAAKU,KAAKT,EAAIO,QAAQT,GAAG3D,YAGrBgE,EAAKG,KAAKN,EAAI1H,MACpB0H,EAAIU,UACPZ,EAAII,EAAIH,GACRC,EAAoB,OAAdA,EAAI7D,OAAkB6D,EAAI7D,MAChC+D,EAAIH,GAAa,MAALD,GAAmB,IAANA,EAAWE,EAAM,GAAGW,OAAOb,EAAGE,KAE9CA,EAAI7D,OAAuB,IAAd6D,EAAI7D,SAC3B2D,EAAII,EAAIH,GACRG,EAAIH,GAAa,MAALD,GAAmB,IAANA,EAAWE,EAAI7D,MAAQ,GAAGwE,OAAOb,EAAGE,EAAI7D,QAInE,OAAO+D,EAGD,SAASU,EAASf,EAAMgB,EAAOC,GACrCD,EAAQA,GAAS,GACjB,IAAIE,EAAKC,EACLC,EAAGC,EAAKC,EADEC,GAAO,EAAMlB,EAAI,GACdmB,EAAKzB,EAAUC,GAQhC,IAAKoB,KANDH,GAAWA,EAAQQ,QACtBP,EAAM,IACFD,GAAWD,EAAMC,GACrBD,EAAQE,GAGCF,EAMT,IAJAK,GAAOL,EAAMI,GAAGX,MAAQO,EAAMI,IAAIM,KAAKV,EAAMI,GAAII,EAAKJ,GAAII,GAIrDF,GADLH,GADAD,EAAMlB,EAAKQ,SAASY,IACV3C,OAASyC,EAAM,CAACA,IACbzC,OAAQ6C,KACpBH,EAAIG,GAAKK,SAAmB,IAARN,IAAkBhB,EAAIe,GAAGC,EAAIE,GAAO,GAM1D,OAFAvB,EAAK2B,QAAUJ,EAERlB,ECpDD,MAAMuB,EAAqB,CAC9BC,EACAC,EACAC,EACAC,EACAC,IACqBC,IAAuB,MAC5C,MAAMC,EAAiCpB,EACnCe,EAAQM,QACRL,GAEEzF,EAAS4F,EAAMG,OAA4B/F,MAGjD0F,EAAY1F,UAFS,IAGrB2F,EAAW,UAACE,EAAON,UAAR,QAHU,KAoBZS,EAAsB,CAC/BR,EACAC,EACAF,EACAU,EAAe,MAEf,MAAOjG,EAAOkG,GAAYC,YAASF,IAC5BJ,EAAQO,GAAaD,YAAS,IAErC,MAAO,CACH,CAAEnG,QAAOkG,WAAUL,SAAQO,aAC3B,CACI5C,KAAM+B,EACNvF,QACA8C,SAAUuD,QAAQR,GAClBvC,QAASgC,EACLC,EACAC,EACAC,EACAS,EACAE,O,kHCvDhB7F,YAAUC,KAEH,MAAMC,EAAUC,YAAO,UAAW;;;mBAGtBG,IAAMC,QAAQC;;MAE3BM,IAAMC,IAAIT,IAAMU,YAAY+E,KAA5BjF,CAAkCI,IAAUC,GAAI;uBAC/Bb,IAAMC,QAAQyF;;EAIxBC,EAAS9F,YAAO,SAAU;;;qBAGlBG,IAAMC,QAAQiB;;MAE7BV,IAAMC,IAAIT,IAAMU,YAAY+E,KAA5BjF,CAAkCI,IAAUC,GAAI;yBAC7Bb,IAAMC,QAAQyF;;EAI1BE,EAAU/F,YAAO,KAAM;;aAEvBG,IAAMG,OAAOwB;MACpB7B,IAAW+F;EAGJC,EAAcjG,YAAO,MAAO;iBACxBG,IAAMU,YAAYM;EAGtB+E,EAAqBlG,YAAO,MAAO;sBAC1BG,IAAMC,QAAQiB;EAGvB8E,EAAkBnG,YAAO,OAAQ;aACjCG,IAAMG,OAAOwB;mBACP3B,IAAMyB,aAAawE;EAGzBzE,EAAe3B,YAAO,MAAO;aAC7BG,IAAMG,OAAOwB;mBACP3B,IAAMyB,aAAaC;EAGzBwE,EAAmBrG,YAAO2B,EAAc;mBAClCxB,IAAMyB,aAAawE;;mBAEnBjG,IAAMC,QAAQc;EAGpBoF,EAAkBtG,YAAO,MAAO;;;gBAG7BG,IAAMC,QAAQiB;mBACXlB,IAAMC,QAAQc;gTCjCjC,MAAM6D,EAAiB,CACnBpI,aACAD,eAGS6J,EAAkC,KAAM,MACjD,MAAMC,EAAsBC,YAAYC,KAClCtI,EAAiBuI,YAAU/I,IAAoBQ,gBAC/C0G,EAAU8B,iBAAwBC,IACjCC,EAAoBC,GAAsBzB,YAC7CR,EACAC,EACA,aAEGiC,EAAqBC,GAAuB3B,YAC/CR,EACAC,EACA,aAGEmC,EAAcV,EACd,uBACA,uBA8BAnE,EAAc,CAChBhD,EACA8H,EACAC,EACAC,GAAmB,IAClB,IAEG,YAAC,WAAD,KACI,YAAC1F,EAAD,KACI,YAAC,IAAD,KAAOtC,GADX,KAC2B,IACvB,YAAC8G,EAAD,KACI,YAAC,IAAD,KAAOgB,KArBH,EAACA,EAA0BG,IAC/CC,YAAa,IACT,YAAClB,EAAD,KACI,YAAC,IAAD,2BAAgC,IAChC,YAACF,EAAD,KACI,YAAC,IAAD,KAAOgB,KAJnBI,CAOGD,GAgBME,CAAgBJ,EAAsBC,IAI7C9E,EAAekF,GAAkB,IAAa,YAAC,IAAD,KAAOA,GAE3D,OACI,YAAC1H,EAAD,KACI,YAAC+F,EAAD,KACI,YAACC,EAAD,KACI,YAAC,IAAD,KAAOmB,KAGf,YAACjB,EAAD,KACI,oBAAMyB,IAAK5C,GACP,YAACoB,EAAD,KACI,YAAC,IAAD,CACI9D,SAAUuD,QAAQoB,EAAmB3E,UACrCC,YAAaA,EACT,yBACA,oCACA,yCAEJC,YAAa,IACT,YAAC,IAAD,GACI7G,KAAK,WACLoH,YAAY,qCACRkE,IAGZxE,YAAaA,EAAYuE,EAAmB3B,WAGpD,YAACe,EAAD,KACI,YAAC,IAAD,CACI9D,SAAUuD,QAAQsB,EAAoB7E,UACtCC,YAAaA,EACT,0BACA,qCACA,iCACA,GAEJC,YAAa,IACT,YAAC,IAAD,GACI7G,KAAK,WACLoH,YAAY,wBACRoE,IAGZ1E,YAAaA,EACTyE,EAAoB7B,WAIhC,YAACmB,EAAD,KACI,YAAC,IAAD,CAAQ3K,QAnFJ,KACpBgM,QAAQC,SAmFY,YAAC,IAAD,uBAEJ,YAAC,IAAD,CACInM,KAAK,SACLE,QAtGGa,UAAmC,MAC1DqL,EAAEC,kBAEE,UAAChD,EAAQM,eAAT,aAAC,EAAiBT,iBAIhBvG,EACF4I,EAAoB1H,MACpBwH,EAAmBxH,OACnB,GAEJyI,gBAAM,UA2FcnM,WAAU,UAACkJ,EAAQM,eAAT,aAAC,EAAiBT,UAE5B,YAAC,IAAD","file":"6.bundle.js","sourcesContent":["import { h, VNode } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper, GridWrapper } from './button.styles';\n\nexport const Button: TypedComponent<Props> = ({\n    type,\n    children,\n    onClick,\n    disabled,\n}: Props) => {\n    return (\n        <Wrapper type={type} onClick={onClick} disabled={disabled}>\n            <GridWrapper>{children}</GridWrapper>\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    type?: string;\n    disabled?: boolean;\n    onClick: Function;\n    children: string | VNode;\n}\n\nButton.propTypes = {\n    type: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    children: PropTypes.any.isRequired,\n};\n\nButton.defaultProps = {\n    type: 'button',\n    disabled: false,\n};\n","import { AppState } from '@/store';\nimport { callAction, mergeState } from '@/common/utils/store';\nimport { adminKeyLocalStorageKeyName } from './database.constants';\nimport { Client } from 'faunadb';\nimport { selectAdminKey } from '@/modules/database/database.selectors';\nimport { DatabaseState } from '@/modules/database/database.state';\nimport { overlayActions } from '@/modules/overlay/overlay.actions';\n\nconst merge = mergeState<DatabaseState>('database');\n\nexport const databaseActions = {\n    setClient: async (\n        appState: AppState,\n        masterKey: string,\n        adminKey: string\n    ): Promise<Partial<AppState>> => {\n        const { setupClient } = await import('./database.service');\n        const { encrypt, decrypt } = await import(\n            '@/modules/cipher/cipher.service'\n        );\n\n        try {\n            const decryptedAdminKey =\n                adminKey === selectAdminKey()\n                    ? (decrypt(adminKey, masterKey) as string)\n                    : adminKey;\n\n            const client: Client = await setupClient({\n                secret: decryptedAdminKey,\n            });\n\n            const encryptedAdminKey = encrypt(decryptedAdminKey, masterKey);\n            localStorage.setItem(\n                adminKeyLocalStorageKeyName,\n                encryptedAdminKey\n            );\n            return merge({ client });\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotConnectToDB',\n                'error'\n            );\n            return merge({});\n        }\n    },\n};\n","import { AppState, store } from '@/store';\nimport { Client } from 'faunadb';\nimport { callAction, mergeState } from '@/common/utils/store';\nimport { databaseActions } from '@/modules/database/database.actions';\nimport {\n    selectIsClientSet,\n    selectClient,\n} from '@/modules/database/database.selectors';\nimport {\n    OptionsPanelVariantName,\n    optionsPanelVariantNames,\n    PasswordEntityPayload,\n    PasswordEntityPayloadReferable,\n} from '@/modules/passwordList/passwordList.constants';\nimport { PasswordListState } from '@/modules/passwordList/passwordList.state';\nimport { overlayActions } from '@/modules/overlay/overlay.actions';\n\nconst merge = mergeState<PasswordListState>('passwordList');\n\nexport const passwordListActions = {\n    switchOptionPanelVariant: (\n        appState: AppState,\n        optionPanelVariantName: OptionsPanelVariantName\n    ): Partial<AppState> => {\n        return merge({\n            currentOptionPanelVariantName: optionPanelVariantName,\n        });\n    },\n    resetSelectedAndDecryptedEntity: (): Partial<AppState> => {\n        return merge({\n            selectedAndDecryptedEntity: {} as PasswordEntityPayloadReferable,\n        });\n    },\n    setSelectedAndDecryptedEntity: (\n        appState: AppState,\n        entity: PasswordEntityPayloadReferable\n    ): Partial<AppState> => {\n        return merge({\n            selectedAndDecryptedEntity: entity,\n        });\n    },\n    fetchPasswords: async (\n        appState: AppState,\n        masterKey: string,\n        adminKey: string,\n        forceReconnect = false\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { fetchAllPasswordEntities } = await import(\n            '@/modules/database/database.service'\n        );\n\n        if (!selectIsClientSet(appState) || forceReconnect) {\n            await callAction(databaseActions.setClient, masterKey, adminKey);\n        }\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const passwords = await fetchAllPasswordEntities(client);\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.passwordsFetchedSuccessfully',\n                'success'\n            );\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n\n            return merge({ passwords });\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotFetchPasswords',\n                'error'\n            );\n            return merge({});\n        }\n    },\n    addNewPassword: async (\n        appState: AppState,\n        newEntityPayload: PasswordEntityPayload,\n        masterKey: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { createPasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n        const { encrypt } = await import('@/modules/cipher/cipher.service');\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const encryptedPasswordEntity = encrypt(\n                {\n                    login: newEntityPayload.login,\n                    password: newEntityPayload.password,\n                },\n                masterKey,\n                true\n            );\n            await createPasswordEntity(client, {\n                label: newEntityPayload.label,\n                value: encryptedPasswordEntity,\n            });\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotCreateNewPassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n    editPassword: async (\n        appState: AppState,\n        entityPayload: PasswordEntityPayloadReferable,\n        masterKey: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { updatePasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n        const { encrypt } = await import('@/modules/cipher/cipher.service');\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            const encryptedPasswordEntity = encrypt(\n                {\n                    login: entityPayload.login,\n                    password: entityPayload.password,\n                },\n                masterKey,\n                true\n            );\n            await updatePasswordEntity(client, entityPayload.refId, {\n                label: entityPayload.label,\n                value: encryptedPasswordEntity,\n            });\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(passwordListActions.resetSelectedAndDecryptedEntity);\n            callAction(\n                passwordListActions.switchOptionPanelVariant,\n                optionsPanelVariantNames.entityFormCollapsed\n            );\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotEditPassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n    removePassword: async (\n        appState: AppState,\n        refId: string\n    ): Promise<Partial<AppState>> => {\n        callAction(overlayActions.showGlobalLoader);\n        const { deletePasswordEntity } = await import(\n            '@/modules/database/database.service'\n        );\n\n        const client = selectClient(store.getState()) as Client;\n\n        try {\n            await deletePasswordEntity(client, refId);\n            callAction(overlayActions.hideGlobalLoader);\n        } catch (err) {\n            callAction(overlayActions.hideGlobalLoader);\n            callAction(\n                overlayActions.showSnackbar,\n                'snackbar.couldNotRemovePassword',\n                'error'\n            );\n        } finally {\n            return merge({});\n        }\n    },\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography, media, stylelint } from '@/common/theme';\nsetPragma(h);\n\n// Due to bugs, (button shouldn't be displayed both grid & flex)\n// More: https://github.com/rachelandrew/gridbugs#10-some-html-elements-cant-be-grid-containers\n// https://github.com/philipwalton/flexbugs#flexbug-9\nexport const Wrapper = styled('button')`\n    ${typography.text14}\n    padding: ${theme.spacing.s12};\n    min-width: 100px;\n    max-width: 360px;\n    text-transform: uppercase;\n    background: ${theme.colors.primaryBlue};\n    box-shadow: ${theme.shadows.clickableItem};\n\n    &:focus {\n        border: none;\n        outline: none;\n    }\n\n    &:active {\n        box-shadow: none;\n    }\n\n    &:disabled {\n        box-shadow: none;\n        background: ${theme.colors.gray};\n    }\n\n    &:hover:enabled {\n        cursor: pointer;\n\n        * {\n            text-decoration: underline;\n        }\n    }\n\n    ${media.gte(theme.breakpoints.s375)(stylelint.css`\n        ${typography.text16}\n        padding: ${theme.spacing.s12} ${theme.spacing.m18};\n    `)}\n\n    ${media.gte(theme.breakpoints.s480)(stylelint.css`\n        ${typography.text18}\n        padding: ${theme.spacing.s12} ${theme.spacing.xl30};\n    `)}\n`;\n\nexport const GridWrapper = styled('span')`\n    display: grid;\n    place-items: center;\n    color: ${theme.colors.white};\n    white-space: nowrap;\n`;\n","export const masterKey = (val?: string) => {\n    return (val && val.length >= 8) || 'optionsPanel.masterKeyTooShort';\n};\n\nexport const encryptionKey = (val?: string) => {\n    return (val && val.length >= 8) || 'optionsPanel.encryptionKeyTooShort';\n};\n\nexport const label = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.labelTooShort';\n};\n\nexport const login = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.loginTooShort';\n};\n\nexport const password = (val?: string): boolean | string => {\n    return (val && val.length >= 3) || 'optionsPanel.passwordTooShort';\n};\n\nexport const adminKey = (val?: string): boolean | string => {\n    return (val && val.length >= 20) || 'settings.adminKeyTooShort';\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography } from '@/common/theme';\nsetPragma(h);\n\nexport const Wrapper = styled('section')`\n    display: grid;\n`;\n\nexport const LabelWrapper = styled('div')`\n    ${typography.text18}\n    font-family: ${theme.fontFamilies.bold};\n    color: ${theme.colors.darkBlue};\n    margin-bottom: ${theme.spacing.xs6};\n`;\n\nexport const InputWrapper = styled('div')`\n    margin-bottom: ${theme.spacing.xs6};\n`;\nexport const ErrorWrapper = styled('div')`\n    ${typography.text18}\n    color: ${theme.colors.red};\n`;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport {\n    Wrapper,\n    LabelWrapper,\n    InputWrapper,\n    ErrorWrapper,\n} from './formControl.styles';\n\nexport const FormControl: TypedComponent<Props> = ({\n    hasError,\n    renderLabel,\n    renderInput,\n    renderError,\n}: Props) => {\n    return (\n        <Wrapper>\n            <LabelWrapper>{renderLabel()}</LabelWrapper>\n            <InputWrapper>{renderInput()}</InputWrapper>\n            {hasError && <ErrorWrapper>{renderError()}</ErrorWrapper>}\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    hasError: string | boolean;\n    renderInput: Function;\n    renderLabel: Function;\n    renderError: Function;\n}\n\nFormControl.propTypes = {\n    hasError: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n        .isRequired,\n    renderLabel: PropTypes.func.isRequired,\n    renderInput: PropTypes.func.isRequired,\n    renderError: PropTypes.func.isRequired,\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, stylelint, typography } from '@/common/theme';\nsetPragma(h);\n\nconst standard = stylelint.css`\n    border: 1px solid ${theme.colors.primaryBlue};\n\n    &:focus {\n        box-shadow: 0 0 0 2px ${theme.colors.primaryBlue} inset;\n    }\n`;\n\nconst withError = stylelint.css`\n    border: 1px solid ${theme.colors.red};\n    color: ${theme.colors.red};\n\n    &:focus {\n        box-shadow: 0 0 0 2px ${theme.colors.red} inset;\n    }\n`;\n\nexport const Wrapper = styled('input')`\n    ${typography.text18}\n    padding: ${theme.spacing.s12};\n    width: 100%;\n    min-width: 240px;\n    color: ${theme.colors.darkBlue};\n    box-shadow: ${theme.shadows.clickableItem};\n    outline: none;\n\n    &:hover {\n        text-decoration: underline;\n    }\n\n    ${({ hasError }: { hasError: boolean }): string =>\n        hasError ? withError : standard}\n`;\n","import { h } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './textInput.styles';\n\nexport const TextInput: TypedComponent<Props> = ({\n    value,\n    onInput,\n    placeholder,\n    hasError,\n    name,\n    type,\n}: Props) => {\n    return (\n        <Wrapper\n            type={type}\n            value={value}\n            onInput={onInput}\n            placeholder={placeholder}\n            hasError={hasError}\n            name={name}\n        />\n    );\n};\n\ninterface Props {\n    onInput: Function;\n    value?: string;\n    placeholder?: string;\n    hasError?: boolean;\n    name?: string;\n    type?: string;\n}\n\nTextInput.propTypes = {\n    onInput: PropTypes.func.isRequired,\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    hasError: PropTypes.bool,\n    name: PropTypes.string,\n    type: PropTypes.string,\n};\n\nTextInput.defaultProps = {\n    value: '',\n    placeholder: '',\n    hasError: false,\n    name: '',\n    type: 'text',\n};\n","export function serialize(form) {\n\tvar i=0, j, key, tmp, out={};\n\tvar rgx1 = /(radio|checkbox)/i;\n\tvar rgx2 = /(file|reset|submit|button)/i;\n\n\twhile (tmp = form.elements[i++]) {\n\t\t// Ignore unnamed, disabled, or (...rgx2) inputs\n\t\tif (!tmp.name || tmp.disabled || rgx2.test(tmp.type)) continue;\n\n\t\tkey = tmp.name;\n\n\t\t// Grab all values from multi-select\n\t\tif (tmp.type === 'select-multiple') {\n\t\t\tout[key] = [];\n\t\t\tfor (j=0; j < tmp.options.length; j++) {\n\t\t\t\tif (tmp.options[j].selected) {\n\t\t\t\t\tout[key].push(tmp.options[j].value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (rgx1.test(tmp.type)) {\n\t\t\tif (tmp.checked) {\n\t\t\t\tj = out[key];\n\t\t\t\ttmp = tmp.value === 'on' || tmp.value;\n\t\t\t\tout[key] = (j == null && j !== 0) ? tmp : [].concat(j, tmp);\n\t\t\t}\n\t\t} else if (tmp.value || tmp.value === 0) {\n\t\t\tj = out[key];\n\t\t\tout[key] = (j == null && j !== 0) ? tmp.value : [].concat(j, tmp.value);\n\t\t}\n\t}\n\n\treturn out;\n}\n\nexport function validate(form, rules, toCheck) {\n\trules = rules || {};\n\tvar nxt, arr, isOkay=true, out={};\n\tvar k, msg, len, data=serialize(form);\n\n\tif (toCheck && toCheck.trim) {\n\t\tnxt = {};\n\t\tnxt[toCheck] = rules[toCheck];\n\t\trules = nxt;\n\t}\n\n\tfor (k in rules) {\n\t\t// Accomodate Function or RegExp\n\t\tmsg = (rules[k].test || rules[k]).call(rules[k], data[k], data);\n\t\t// Accomodate radio|checkbox groups\n\t\tnxt = form.elements[k];\n\t\tarr = nxt.length ? nxt : [nxt];\n\t\tfor (len=arr.length; len--;) {\n\t\t\tarr[len].isValid = (msg === true) || (out[k]=msg,isOkay=false);\n\t\t}\n\t}\n\n\tform.isValid = isOkay;\n\n\treturn out;\n}\n\nexport function bind(form, opts) {\n\topts = opts || {};\n\n\tform.serialize = serialize.bind(null, form);\n\tform.validate = validate.bind(null, form, opts.rules);\n\n\tform.onsubmit = function (ev) {\n\t\tev.preventDefault();\n\t\tev.errors = form.errors = form.validate();\n\t\treturn form.isValid ? opts.onSubmit(ev) : opts.onError(ev);\n\t};\n\n\treturn form;\n}\n","import { RefObject } from 'preact';\nimport { useState } from 'preact/hooks';\nimport { validate } from 'formee';\n\ntype InputEventHandler = (event: Event) => void;\n\nexport const validateInputField = (\n    fieldName: string,\n    formRef: RefObject<HTMLFormElement>,\n    formValidation: { [key: string]: (val: string) => boolean | string },\n    valueSetter: (val: string) => void,\n    errorSetter: (errorMsg: string) => void\n): InputEventHandler => (event: Event): void => {\n    const errors: { [key: string]: any } = validate(\n        formRef.current as HTMLFormElement,\n        formValidation\n    );\n    const value = (event.target as HTMLInputElement).value;\n    const defaultValue = '';\n\n    valueSetter(value ?? defaultValue);\n    errorSetter(errors[fieldName] ?? defaultValue);\n};\n\nexport interface FormTextInputState {\n    value: string;\n    setValue: (value: string) => void;\n    errors: string;\n    setErrors: (value: string) => void;\n}\n\nexport interface FormTextInputProps {\n    name: string;\n    value: string;\n    hasError: boolean;\n    onInput: Function;\n}\n\nexport const useInputFormControl = (\n    formRef: RefObject<HTMLFormElement>,\n    formValidation: { [key: string]: (val: string) => boolean | string },\n    fieldName: string,\n    defaultValue = ''\n): [FormTextInputState, FormTextInputProps] => {\n    const [value, setValue] = useState(defaultValue);\n    const [errors, setErrors] = useState('');\n\n    return [\n        { value, setValue, errors, setErrors },\n        {\n            name: fieldName,\n            value,\n            hasError: Boolean(errors),\n            onInput: validateInputField(\n                fieldName,\n                formRef,\n                formValidation,\n                setValue,\n                setErrors\n            ),\n        },\n    ];\n};\n","import { h } from 'preact';\nimport { styled, setPragma } from 'goober';\nimport { theme, typography, media, stylelint } from '@/common/theme';\nsetPragma(h);\n\nexport const Wrapper = styled('section')`\n    display: grid;\n    justify-items: center;\n    padding-top: ${theme.spacing.s12};\n\n    ${media.gte(theme.breakpoints.m880)(stylelint.css`\n        padding-top: ${theme.spacing.xl40};\n    `)}\n`;\n\nexport const Header = styled('header')`\n    display: grid;\n    justify-items: center;\n    margin-bottom: ${theme.spacing.xl30};\n\n    ${media.gte(theme.breakpoints.m880)(stylelint.css`\n        margin-bottom: ${theme.spacing.xl40};\n    `)}\n`;\n\nexport const Heading = styled('h2')`\n    text-align: center;\n    color: ${theme.colors.darkBlue};\n    ${typography.text24}\n`;\n\nexport const FormWrapper = styled('div')`\n    max-width: ${theme.breakpoints.s480};\n`;\n\nexport const FormControlWrapper = styled('div')`\n    padding-bottom: ${theme.spacing.xl30};\n`;\n\nexport const DescriptiveText = styled('span')`\n    color: ${theme.colors.darkBlue};\n    font-family: ${theme.fontFamilies.regular};\n`;\n\nexport const LabelWrapper = styled('div')`\n    color: ${theme.colors.darkBlue};\n    font-family: ${theme.fontFamilies.bold};\n`;\n\nexport const NoteLabelWrapper = styled(LabelWrapper)`\n    font-family: ${theme.fontFamilies.regular};\n    font-style: italic;\n    padding-top: ${theme.spacing.m18};\n`;\n\nexport const ControlsWrapper = styled('div')`\n    display: grid;\n    grid-auto-flow: column;\n    grid-gap: ${theme.spacing.xl30};\n    padding-top: ${theme.spacing.m18};\n`;\n","import { h, VNode, Fragment } from 'preact';\nimport { TypedComponent } from '@/common/typings/prop-types';\nimport { route } from 'preact-router';\nimport {\n    Wrapper,\n    Header,\n    Heading,\n    FormWrapper,\n    FormControlWrapper,\n    DescriptiveText,\n    LabelWrapper,\n    NoteLabelWrapper,\n    ControlsWrapper,\n} from './settings.styles';\nimport { Text } from '@/modules/localisation/components/text';\nimport { useRef } from 'preact/hooks';\nimport { FormControl } from '@/common/components/formControl';\nimport { TextInput } from '@/common/components/textInput';\nimport { renderIfTrue } from '@/common/utils/rendering';\nimport { Button } from '@/common/components/button';\nimport { useAction, useSelector } from '@/store';\nimport { passwordListActions } from '@/modules/passwordList/passwordList.actions';\nimport { adminKey, masterKey } from '@/common/utils/formValidators';\nimport { useInputFormControl } from '@/common/utils/form';\nimport { selectIsFirstTimeOnDevice } from '@/modules/database/database.selectors';\n\nconst formValidation = {\n    adminKey,\n    masterKey,\n} as const;\n\nexport const Settings: TypedComponent<Props> = () => {\n    const isFirstTimeOnDevice = useSelector(selectIsFirstTimeOnDevice);\n    const fetchPasswords = useAction(passwordListActions.fetchPasswords);\n    const formRef = useRef<HTMLFormElement>(undefined as any);\n    const [adminKeyInputState, adminKeyInputProps] = useInputFormControl(\n        formRef,\n        formValidation,\n        'adminKey'\n    );\n    const [masterKeyInputState, masterKeyInputProps] = useInputFormControl(\n        formRef,\n        formValidation,\n        'masterKey'\n    );\n\n    const headingText = isFirstTimeOnDevice\n        ? 'settings.connectToDB'\n        : 'settings.headingText';\n\n    const handleConnectClick = async (e: Event): Promise<void> => {\n        e.preventDefault();\n\n        if (!formRef.current?.isValid) {\n            return;\n        }\n\n        await fetchPasswords(\n            masterKeyInputState.value,\n            adminKeyInputState.value,\n            true\n        );\n        route('/app');\n    };\n    const handleBackClick = (): void => {\n        history.back();\n    };\n\n    const renderNoteLabel = (labelDescription: string, shouldRender: boolean) =>\n        renderIfTrue(() => (\n            <NoteLabelWrapper>\n                <Text>settings.noteLabel</Text>{' '}\n                <DescriptiveText>\n                    <Text>{labelDescription}</Text>\n                </DescriptiveText>\n            </NoteLabelWrapper>\n        ))(shouldRender);\n\n    const renderLabel = (\n        label: string,\n        labelDescription: string,\n        noteLabelDescription: string,\n        shouldRenderNote = false\n    ) => (): VNode => {\n        return (\n            <Fragment>\n                <LabelWrapper>\n                    <Text>{label}</Text> -{' '}\n                    <DescriptiveText>\n                        <Text>{labelDescription}</Text>\n                    </DescriptiveText>\n                </LabelWrapper>\n                {renderNoteLabel(noteLabelDescription, shouldRenderNote)}\n            </Fragment>\n        );\n    };\n    const renderError = (error: string) => (): VNode => <Text>{error}</Text>;\n\n    return (\n        <Wrapper>\n            <Header>\n                <Heading>\n                    <Text>{headingText}</Text>\n                </Heading>\n            </Header>\n            <FormWrapper>\n                <form ref={formRef}>\n                    <FormControlWrapper>\n                        <FormControl\n                            hasError={Boolean(adminKeyInputProps.hasError)}\n                            renderLabel={renderLabel(\n                                'settings.adminKeyLabel',\n                                'settings.adminKeyLabelDescription',\n                                'settings.noteLabelDescriptionAdminKey'\n                            )}\n                            renderInput={(): VNode => (\n                                <TextInput\n                                    type=\"password\"\n                                    placeholder=\"92xIJf_ge234kalfnqql4o25ou4334201\"\n                                    {...adminKeyInputProps}\n                                />\n                            )}\n                            renderError={renderError(adminKeyInputState.errors)}\n                        />\n                    </FormControlWrapper>\n                    <FormControlWrapper>\n                        <FormControl\n                            hasError={Boolean(masterKeyInputProps.hasError)}\n                            renderLabel={renderLabel(\n                                'settings.masterKeyLabel',\n                                'settings.masterKeyLabelDescription',\n                                'settings.noteLabelDescription',\n                                true\n                            )}\n                            renderInput={(): VNode => (\n                                <TextInput\n                                    type=\"password\"\n                                    placeholder=\"myMasterPassword1234\"\n                                    {...masterKeyInputProps}\n                                />\n                            )}\n                            renderError={renderError(\n                                masterKeyInputState.errors\n                            )}\n                        />\n                    </FormControlWrapper>\n                    <ControlsWrapper>\n                        <Button onClick={handleBackClick}>\n                            <Text>settings.back</Text>\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            onClick={handleConnectClick}\n                            disabled={!formRef.current?.isValid}\n                        >\n                            <Text>settings.connect</Text>\n                        </Button>\n                    </ControlsWrapper>\n                </form>\n            </FormWrapper>\n        </Wrapper>\n    );\n};\n\nexport interface Props {}\n"],"sourceRoot":""}