{"version":3,"sources":["webpack:///./src/modules/database/database.service.ts"],"names":["query","faunadb","setupClient","async","adminClient","Client","options","serverKey","CreateKey","role","client","secret","collections","Paginate","Collections","Boolean","data","length","hasCollections","CreateCollection","name","process","indexes","Indexes","hasAllPasswordsIndex","CreateIndex","source","Collection","refId","localStorage","getItem","unusedServerKeyRefIdLocalStorageKeyName","Delete","Ref","Keys","removeUnusedServerKey","setItem","ref","id","fetchAllPasswordEntities","Map","Match","Index","Lambda","Get","Var","createPasswordEntity","encryptedEntity","Create","updatePasswordEntity","Update","deletePasswordEntity"],"mappings":"kIAAA,ySAGA,MAAM,MAAEA,GAAUC,IA2CLC,EAAcC,UACvB,MAAMC,EAAc,IAAIH,IAAQI,OAAOC,GACjCC,QAGIH,EAAYJ,MAAMA,EAAMQ,UAAU,CAAEC,KAAM,YAE9CC,EAAS,IAAIT,IAAQI,OAAO,CAAEM,OAAQJ,EAAUI,SAoBtD,YAnDmBR,WACnB,MAAMS,QAAwCF,EAAOV,MACjDA,EAAMa,SAASb,EAAMc,gBAGzB,OAAOC,QAAQH,EAAYI,KAAKC,SA4BpBC,CAAeR,UACjBA,EAAOV,MAAMA,EAAMmB,iBAAiB,CAAEC,KApD7BC,mBA0BMlB,WACzB,MAAMmB,QAAoCZ,EAAOV,MAC7CA,EAAMa,SAASb,EAAMuB,YAGzB,OAAOR,QAAQO,EAAQN,KAAKC,SAwBhBO,CAAqBd,UACvBA,EAAOV,MACTA,EAAMyB,YAAY,CACdL,KAzDEC,cA0DFK,OAAQ1B,EAAM2B,WA3DPN,eAkCOlB,WAC1B,MAAMyB,EAAQC,aAAaC,QAAQC,KAE/BH,SACMxB,EAAYJ,MAAMA,EAAMgC,OAAOhC,EAAMiC,IAAIjC,EAAMkC,OAAQN,MA0BjEO,CAAsB/B,GACtByB,aAAaO,QACTL,IACAxB,EAAU8B,IAAIC,IAEX5B,GAGE6B,EAA2BpC,gBAIIO,EAAOV,MAC3CA,EAAMwC,IACFxC,EAAMa,SAASb,EAAMyC,MAAMzC,EAAM0C,MA7E3BrB,iBA8ENrB,EAAM2C,OAJI,mBAIc3C,EAAM4C,IAAI5C,EAAM6C,IAJ9B,yBAQF7B,KAGP8B,EAAuB3C,MAChCO,EACAqC,WAEMrC,EAAOV,MACTA,EAAMgD,OAAOhD,EAAM2B,WA3FJN,YA2FgC,CAC3CL,KAAM+B,MAKLE,EAAuB9C,MAChCO,EACAkB,EACAmB,WAEMrC,EAAOV,MACTA,EAAMkD,OAAOlD,EAAMiC,IAAIjC,EAAM2B,WAvGdN,YAuG0CO,GAAQ,CAC7DZ,KAAM+B,MAKLI,EAAuBhD,MAChCO,EACAkB,WAEMlB,EAAOV,MACTA,EAAMgC,OAAOhC,EAAMiC,IAAIjC,EAAM2B,WAlHdN,YAkH0CO","file":"2.bundle.js","sourcesContent":["import faunadb, { ClientConfig, Client } from 'faunadb';\nimport { unusedServerKeyRefIdLocalStorageKeyName } from './database.constants';\n\nconst { query } = faunadb;\nconst collectionName = process.env.COLLECTION_NAME as string;\nconst indexName = process.env.INDEX_NAME as string;\n\ninterface PasswordListRaw {\n    data: PasswordEntityRaw[];\n}\n\ninterface PasswordEntityDatabasePayload {\n    label: string;\n    value: string;\n}\n\nexport interface PasswordEntityRaw {\n    ref: { id: string; value: { id: string } };\n    ts: number;\n    data: PasswordEntityDatabasePayload; // all passwords are stored in db as encrypted strings\n}\n\nconst hasCollections = async (client: Client): Promise<boolean> => {\n    const collections: { data: object[] } = await client.query(\n        query.Paginate(query.Collections())\n    );\n\n    return Boolean(collections.data.length);\n};\n\nconst hasAllPasswordsIndex = async (client: Client): Promise<boolean> => {\n    const indexes: { data: object[] } = await client.query(\n        query.Paginate(query.Indexes())\n    );\n\n    return Boolean(indexes.data.length);\n};\n\nconst removeUnusedServerKey = async (adminClient: Client): Promise<void> => {\n    const refId = localStorage.getItem(unusedServerKeyRefIdLocalStorageKeyName);\n\n    if (refId) {\n        await adminClient.query(query.Delete(query.Ref(query.Keys(), refId)));\n    }\n};\n\nexport const setupClient = async (options: ClientConfig): Promise<Client> => {\n    const adminClient = new faunadb.Client(options);\n    const serverKey: {\n        secret: string;\n        ref: { id: string };\n    } = await adminClient.query(query.CreateKey({ role: 'server' }));\n\n    const client = new faunadb.Client({ secret: serverKey.secret });\n\n    if (!(await hasCollections(client))) {\n        await client.query(query.CreateCollection({ name: collectionName }));\n    }\n\n    if (!(await hasAllPasswordsIndex(client))) {\n        await client.query(\n            query.CreateIndex({\n                name: indexName,\n                source: query.Collection(collectionName),\n            })\n        );\n    }\n\n    removeUnusedServerKey(adminClient);\n    localStorage.setItem(\n        unusedServerKeyRefIdLocalStorageKeyName,\n        serverKey.ref.id\n    );\n    return client;\n};\n\nexport const fetchAllPasswordEntities = async (\n    client: Client\n): Promise<PasswordEntityRaw[]> => {\n    const paramName = 'placeholderValue';\n    const response: PasswordListRaw = await client.query(\n        query.Map(\n            query.Paginate(query.Match(query.Index(indexName))),\n            query.Lambda(paramName, query.Get(query.Var(paramName)))\n        )\n    );\n\n    return response.data;\n};\n\nexport const createPasswordEntity = async (\n    client: Client,\n    encryptedEntity: PasswordEntityDatabasePayload\n): Promise<void> => {\n    await client.query(\n        query.Create(query.Collection(collectionName), {\n            data: encryptedEntity,\n        })\n    );\n};\n\nexport const updatePasswordEntity = async (\n    client: Client,\n    refId: string,\n    encryptedEntity: PasswordEntityDatabasePayload\n): Promise<void> => {\n    await client.query(\n        query.Update(query.Ref(query.Collection(collectionName), refId), {\n            data: encryptedEntity,\n        })\n    );\n};\n\nexport const deletePasswordEntity = async (\n    client: Client,\n    refId: string\n): Promise<void> => {\n    await client.query(\n        query.Delete(query.Ref(query.Collection(collectionName), refId))\n    );\n};\n"],"sourceRoot":""}