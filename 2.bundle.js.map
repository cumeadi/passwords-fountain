{"version":3,"sources":["webpack:///./src/modules/database/database.service.ts"],"names":["query","faunadb","removeUnusedServerKey","async","keys","adminClient","Paginate","Keys","data","fetchKeys","firstServerKeyRefId","value","id","length","Number","process","refId","Delete","Ref","deleteKey","setupClient","Client","options","serverKey","CreateKey","role","client","secret","collections","Collections","Boolean","hasCollections","CreateCollection","name","indexes","Indexes","hasAllPasswordsIndex","CreateIndex","source","Collection","fetchAllPasswordEntities","Map","Match","Index","Lambda","Get","Var","createPasswordEntity","encryptedEntity","Create","updatePasswordEntity","Update","deletePasswordEntity"],"mappings":"kIAAA,iSAEA,MAAM,MAAEA,GAAUC,IAsDZC,EAAwBC,UAC1B,MAAMC,OAbQD,iBACyBE,EAAYL,MAC/CA,EAAMM,SAASN,EAAMO,UAGbC,KAQOC,CAAUJ,GACvBK,EAAsBN,EAAK,GAAGO,MAAMC,GAEtCR,EAAKS,OAASC,OAvDFC,WA+CFZ,OAAOE,EAAqBW,WACpCX,EAAYL,MAAMA,EAAMiB,OAAOjB,EAAMkB,IAAIlB,EAAMO,OAAQS,MAQnDG,CAAUd,EAAaK,IAIxBU,EAAcjB,UACvB,MAAME,EAAc,IAAIJ,IAAQoB,OAAOC,GACjCC,QAAsClB,EAAYL,MACpDA,EAAMwB,UAAU,CAAEC,KAAM,YAGtBC,EAAS,IAAIzB,IAAQoB,OAAO,CAAEM,OAAQJ,EAAUI,SAgBtD,YA3DmBxB,WACnB,MAAMyB,QAAwCF,EAAO1B,MACjDA,EAAMM,SAASN,EAAM6B,gBAGzB,OAAOC,QAAQF,EAAYpB,KAAKK,SAwCpBkB,CAAeL,UACjBA,EAAO1B,MAAMA,EAAMgC,iBAAiB,CAAEC,KAvE7BlB,mBAiCMZ,WACzB,MAAM+B,QAAoCR,EAAO1B,MAC7CA,EAAMM,SAASN,EAAMmC,YAGzB,OAAOL,QAAQI,EAAQ1B,KAAKK,SAoChBuB,CAAqBV,UACvBA,EAAO1B,MACTA,EAAMqC,YAAY,CACdJ,KA5EElB,cA6EFuB,OAAQtC,EAAMuC,WA9EPxB,eAmFnBb,EAAsBG,GACfqB,GAGEc,EAA2BrC,gBAIIuB,EAAO1B,MAC3CA,EAAMyC,IACFzC,EAAMM,SAASN,EAAM0C,MAAM1C,EAAM2C,MA5F3B5B,iBA6FNf,EAAM4C,OAJI,mBAIc5C,EAAM6C,IAAI7C,EAAM8C,IAJ9B,yBAQFtC,KAGPuC,EAAuB5C,MAChCuB,EACAsB,WAEMtB,EAAO1B,MACTA,EAAMiD,OAAOjD,EAAMuC,WA1GJxB,YA0GgC,CAC3CP,KAAMwC,MAKLE,EAAuB/C,MAChCuB,EACAV,EACAgC,WAEMtB,EAAO1B,MACTA,EAAMmD,OAAOnD,EAAMkB,IAAIlB,EAAMuC,WAtHdxB,YAsH0CC,GAAQ,CAC7DR,KAAMwC,MAKLI,EAAuBjD,MAChCuB,EACAV,WAEMU,EAAO1B,MACTA,EAAMiB,OAAOjB,EAAMkB,IAAIlB,EAAMuC,WAjIdxB,YAiI0CC","file":"2.bundle.js","sourcesContent":["import faunadb, { ClientConfig, Client } from 'faunadb';\n\nconst { query } = faunadb;\nconst collectionName = process.env.COLLECTION_NAME as string;\nconst indexName = process.env.INDEX_NAME as string;\nconst dbKeysLimit = process.env.DB_KEYS_LIMIT as string;\n\ninterface PasswordListRaw {\n    data: PasswordEntityRaw[];\n}\n\ninterface PasswordEntityDatabasePayload {\n    label: string;\n    value: string;\n}\n\nexport interface PasswordEntityRaw {\n    ref: { id: string; value: { id: string } };\n    ts: number;\n    data: PasswordEntityDatabasePayload; // all passwords are stored in db as encrypted strings\n}\n\ninterface KeyRef {\n    value: {\n        id: string;\n    };\n}\n\nconst hasCollections = async (client: Client): Promise<boolean> => {\n    const collections: { data: object[] } = await client.query(\n        query.Paginate(query.Collections())\n    );\n\n    return Boolean(collections.data.length);\n};\n\nconst hasAllPasswordsIndex = async (client: Client): Promise<boolean> => {\n    const indexes: { data: object[] } = await client.query(\n        query.Paginate(query.Indexes())\n    );\n\n    return Boolean(indexes.data.length);\n};\n\nconst fetchKeys = async (adminClient: Client): Promise<KeyRef[]> => {\n    const keys: { data: KeyRef[] } = await adminClient.query(\n        query.Paginate(query.Keys())\n    );\n\n    return keys.data;\n};\n\nconst deleteKey = async (adminClient: Client, refId: string): Promise<void> => {\n    await adminClient.query(query.Delete(query.Ref(query.Keys(), refId)));\n};\n\nconst removeUnusedServerKey = async (adminClient: Client): Promise<void> => {\n    const keys = await fetchKeys(adminClient);\n    const firstServerKeyRefId = keys[1].value.id;\n\n    if (keys.length > Number(dbKeysLimit)) {\n        await deleteKey(adminClient, firstServerKeyRefId);\n    }\n};\n\nexport const setupClient = async (options: ClientConfig): Promise<Client> => {\n    const adminClient = new faunadb.Client(options);\n    const serverKey: { secret: string } = await adminClient.query(\n        query.CreateKey({ role: 'server' })\n    );\n\n    const client = new faunadb.Client({ secret: serverKey.secret });\n\n    if (!(await hasCollections(client))) {\n        await client.query(query.CreateCollection({ name: collectionName }));\n    }\n\n    if (!(await hasAllPasswordsIndex(client))) {\n        await client.query(\n            query.CreateIndex({\n                name: indexName,\n                source: query.Collection(collectionName),\n            })\n        );\n    }\n\n    removeUnusedServerKey(adminClient);\n    return client;\n};\n\nexport const fetchAllPasswordEntities = async (\n    client: Client\n): Promise<PasswordEntityRaw[]> => {\n    const paramName = 'placeholderValue';\n    const response: PasswordListRaw = await client.query(\n        query.Map(\n            query.Paginate(query.Match(query.Index(indexName))),\n            query.Lambda(paramName, query.Get(query.Var(paramName)))\n        )\n    );\n\n    return response.data;\n};\n\nexport const createPasswordEntity = async (\n    client: Client,\n    encryptedEntity: PasswordEntityDatabasePayload\n): Promise<void> => {\n    await client.query(\n        query.Create(query.Collection(collectionName), {\n            data: encryptedEntity,\n        })\n    );\n};\n\nexport const updatePasswordEntity = async (\n    client: Client,\n    refId: string,\n    encryptedEntity: PasswordEntityDatabasePayload\n): Promise<void> => {\n    await client.query(\n        query.Update(query.Ref(query.Collection(collectionName), refId), {\n            data: encryptedEntity,\n        })\n    );\n};\n\nexport const deletePasswordEntity = async (\n    client: Client,\n    refId: string\n): Promise<void> => {\n    await client.query(\n        query.Delete(query.Ref(query.Collection(collectionName), refId))\n    );\n};\n"],"sourceRoot":""}